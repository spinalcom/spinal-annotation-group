angular.module('app.route',['ngRoute']),angular.module('app.services',[]),angular.module('app.directives',[]),angular.module('app.controllers',[]),angular.module('app.spinalcom',['settings','ngMaterial']),angular.module('app.spinalforge.plugin',[]),angular.module('SpinalApp',['ngAnimate','ngMaterial','app.directives','app.route','app.services','app.controllers','ngMdIcons','settings','app.spinalcom','app.spinalforge.plugin','colorpicker.module']).run(['$rootScope','$location','authService',function(a,b,c){let d=c.get_user();a.$on('$routeChangeStart',function(a,e){e.$$route.authenticate&&!c.is_Connected()&&c.login(d.username,d.password).then(function(){},function(){b.path('/login')})})}]).config(['$mdThemingProvider',function(a){a.theme('altTheme').primaryPalette('grey',{default:'200'}).accentPalette('grey',{default:'700'}).dark(),a.theme('default').dark(),a.setDefaultTheme('altTheme'),a.alwaysWatchTheme(!0)}]).run(['$templateCache','$http',function(a,b){let c=(c,d)=>{b.get(c).then((b)=>{a.put(d,b.data)},()=>{console.log('Cannot load the file '+c)})},d=[{uri:'app/templates/forgeviewer.html',name:'forgeviewer.html'}];for(var e=0;e<d.length;e++)c(d[e].uri,d[e].name)}]);
angular.module('settings',[]).constant('config',{main_path:'/',spinalhub_url:'127.0.0.1',spinalhub_port:'8888',spinalhub_user:'168'});
angular.module("app.route").config(["$routeProvider","$locationProvider",function(a){a.when("/viewer/:filepath",{templateUrl:"app/templates/main.html",authenticate:!0,controller:"mainCtrl"}).when("/login",{templateUrl:"app/templates/login.html",authenticate:!1,controller:"loginCtrl"}).when("/404",{authenticate:!1,controller:["$location",function(a){a.replace("/drive/")}]}).otherwise({redirectTo:"/404"})}]);
angular.module('app.directives').directive('navbar',[function(){return{restrict:'E',templateUrl:'app/templates/navbar.html',controller:'navbarCtrl'}}]).directive('menuGlayout',['goldenLayoutService','$timeout',function(a){return{restrict:'E',scope:{layoutInfo:'=info'},replace:!0,template:'<li ng-repeat="layout in layoutInfo"  id="{{layout.id}}"><a >{{layout.name}}</a></li>',link:(b)=>{a.wait_ready().then(()=>{let c=(a,b)=>()=>{a.createChild(b.cfg)};for(var d=0;d<b.layoutInfo.length;d++){let e=b.layoutInfo[d];a.createDragSource($('#'+e.id)[0],e.cfg),$('#'+e.id).click(c(a,e))}})}}}]).directive('ngRightClick',['$parse',function(a){return function(b,c,d){var e=a(d.ngRightClick);c.bind('contextmenu',function(a){b.$apply(function(){a.preventDefault(),e(b,{$event:a})})})}}]);
angular.module('app.spinalcom').factory('ngSpinalCore',['$q',function(a){var b={};return b.conn=0,b.connect=function(a){b.conn=spinalCore.connect(a)},b.store=function(c,d){var e=a.defer();return spinalCore.store(b.conn,c,d,function(a){e.resolve(a)},function(){e.reject()}),e.promise},b.load=function(c){var d=a.defer();return spinalCore.load(b.conn,c,function(a){d.resolve(a)},function(){d.reject()}),d.promise},b.load_type=function(c,d){var e=a.defer();return spinalCore.load_type(b.conn,c,d,function(a){e.resolve(a)},function(){e.reject()}),e.promise},b.load_right=function(c){var d=a.defer();return spinalCore.load_right(b.conn,c,function(a){d.resolve(a)},function(){d.reject()}),d.promise},b.share_model=function(a,c,d,e){return spinalCore.share_model(b.conn,a,c,d,e)},b}]);
angular.module('app.spinalcom').factory('spinalModelDictionary',['$q','ngSpinalCore','config','authService','$routeParams','$location',function(a,b,c,d,e,f){let g={};return g.model=0,g.init=()=>{var c=a.defer();return 0==g.model?d.wait_connect().then(()=>{let a=d.get_user(),h=e.filepath;console.log(h),h&&(h=atob(h),b.load(h).then((a)=>{g.model=a,console.log(a),c.resolve(a)},()=>{let a='not able to load : '+h;console.error(a),f.replace('/drive/'),c.reject(a)}))},()=>{let a='not able to load : '+path;console.error(a),f.replace('/drive/'),c.reject(a)}):c.resolve(g.model),c.promise},g}]);
angular.module('app.services').factory('goldenLayoutService',['$q','$window','$templateCache','$rootScope','$compile',function(a,b,c,d,e){var f={content:[{type:'row',content:[{isClosable:!1,title:'Viewer',type:'component',componentName:'SpinalHome',componentState:{template:'forgeviewer.html',controller:'forgeViewerCtrl'}}]}]};let g=0,h={};return h.init=()=>{0==g&&(g=new GoldenLayout(f,$('#g-layout')),g.registerComponent('SpinalHome',function(a,b){var f=a.getElement();''==b.template?(f.html(),e(f.contents())(d)):(f.html('<div class="gpannel-content" ng-controller="'+b.controller+'" ng-cloak>'+c.get(b.template)+'</div>'),e(f.contents())(d))}),g.init(),angular.element(b).bind('resize',function(){g.updateSize()}),d.$emit('GoldenLayout_READY'))},h.wait_ready=()=>a(function(a){d.$on('GoldenLayout_READY',()=>{a()})}),h.createChild=(a)=>{g.root.contentItems[0].addChild(a)},h.createDragSource=(a,b)=>{g.createDragSource(a,b)},h}]).factory('layout_uid',function(){let a=0;return{get:()=>{let b=a++;return b}}});
angular.module('app.spinalcom').factory('authService',['$q','ngSpinalCore','config','$http',function(a,b,c,d){let e={},f={username:'',password:'',id:''},g=!1;e.save_user=(a,b,c)=>{f.username=a,f.password=b,f.id=c,window.localStorage.setItem('spinalhome_cfg',btoa(JSON.stringify(f)))},e.get_user=()=>{let a=window.localStorage.getItem('spinalhome_cfg');return a&&(f=JSON.parse(atob(a))),f},e.logout=()=>{''!=f.username&&(e.save_user('','',''),location.reload())},e.login=(f,j)=>{let k=a.defer();return d.get('/get_user_id'+'?u='+f+'&p='+j).then(function(a){var d=parseInt(a.data),l=0;if(-1==d){for(k.reject('Login Error: username / password pair not found.'),l=0;l<h.length;l++)h[l].reject();return void(h=[])}for(b.connect('http://'+d+':'+j+'@'+c.spinalhub_url+':'+c.spinalhub_port+'/'),e.save_user(f,j,d),g=!0,k.resolve(),l=0;l<h.length;l++)h[l].resolve();h=[]},function(){k.reject('Connection Error: Imposible to connect to the server.');for(var a=0;a<h.length;a++)h[a].reject();h=[]}),k.promise},e.is_Connected=()=>g;let h=[];return e.wait_connect=()=>{let b=a.defer();return!0==g?b.resolve():h.push(b),b.promise},e}]);
angular.module('app.controllers').controller('mainCtrl',['$scope','$routeParams','goldenLayoutService','spinalModelDictionary',function(a,b,c){c.init()}]);
angular.module('app.controllers').controller('navbarCtrl',['$scope','authService','$location','$routeParams',function(a,b,c,d){a.username='',a.connected=!1,b.wait_connect().then(()=>{a.username=b.get_user().username,a.connected=!0,a.viewer=d.filepath,a.viewer=a.viewer?atob(a.viewer):'viewer',console.log(d.filepath)}),a.logout=()=>{c.path('/login')},a.layouts=[{id:'drag-viewer',name:'viewer',cfg:{isClosable:!0,title:'viewer',type:'component',componentName:'SpinalHome',componentState:{template:'forgeviewer.html',controller:'forgeViewerCtrl'}}}]}]);
angular.module('app.spinalforge.plugin').controller('forgeViewerCtrl',['$scope','$rootScope','$mdDialog','authService','$compile','$injector','layout_uid','spinalModelDictionary',function(a,b,c,d,e,f,g,h){a.injector=f,a.uid=g.get(),console.log('forgeviewerCtrl start'),b.allNotes=[],b.allNotes=[{title:new Str('test1')},{title:new Str('test1')},{title:new Str('test1')},{title:new Str('test1')}],h.init().then(function(b){function c(){return h=g.bubble.search({type:'geometry',role:'3d'}),0===h.length?void console.error('Document contains no viewables.'):void g.selectItem(h[h.length-1].data,e,f)}function d(a){console.error('onDocumentLoadFailure() - errorCode:'+a)}function e(b){b.scope=a,console.log('Viewers are equal: '+(b===g.getCurrentViewer()))}function f(a){console.error('onItemLoadFail() - errorCode:'+a)}var g,h;console.log('forgeviewerCtrl start 2');var i={extensions:['PannelAnnotation','Autodesk.ADN.Viewing.Extension.Color']},j={env:'AutodeskProduction',accessToken:''},k='urn:'+b.urn.get();(function(a,b,c){a.oauth.set(''),a.ask_token.set(!0);var d=!0,e=function(){d&&''!=a.oauth.get()&&(d=!1,a.oauth.unbind(e),j.accessToken=a.oauth.get(),c(b))};a.oauth.bind(e)})(b,k,function(b){Autodesk.Viewing.Initializer(j,function(){g=new Autodesk.Viewing.ViewingApplication('MyViewerDiv'+a.uid),g.registerViewer(g.k3D,Autodesk.Viewing.Private.GuiViewer3D,i),g.loadDocument(b,c,d)})})})}]);
angular.module('app.controllers').controller('loginCtrl',['$scope','authService','$mdToast','$location',function(a,b,c,d){let e=c.simple().hideDelay(3e3),f=b.get_user();b.logout(),a.conf={email:'',password:''},a.ConnectBtn=()=>{b.login(a.conf.email,a.conf.password).then(()=>{d.path('/home')},(a)=>{e.textContent(a),c.show(e)})}}]);
angular.module("app.spinalforge.plugin").run(["spinalModelDictionary","$mdDialog","$mdToast","authService","$rootScope","$compile",function(a,b,c,d,e,f){Autodesk.Viewing.theExtensionManager.registerExtension("PannelAnnotation",class{constructor(a,b){Autodesk.Viewing.Extension.call(this,a,b),this.viewer=a,this.panel=null,this.user=d.get_user(),e.focus_input=function(){var a=document.getElementById("_input");a.focus()},e.exec_function=(a,b=null,c)=>{"createTheme"===a?this.createTheme():"addNote"===a?this.createNote(b):"seeAnnotation"===a?this.SeeAnnotation(b):"settingAnnotation"===a?this.settingAnnotation(b):"save"===a?this.saveModification(b,c):void 0}}load(){return this.viewer.toolbar?this.createUI():(this.onToolbarCreatedBinded=this.onToolbarCreated.bind(this),this.viewer.addEventListener(av.TOOLBAR_CREATED_EVENT,this.onToolbarCreatedBinded)),!0}onToolbarCreated(){this.viewer.removeEventListener(av.TOOLBAR_CREATED_EVENT,this.onToolbarCreatedBinded),this.onToolbarCreatedBinded=null,this.createUI()}unload(){return this.viewer.toolbar.removeControl(this.subToolbar),!0}createUI(){this.panel=new PanelClass(this.viewer,"Annotation"),this.initialize();var a=new Autodesk.Viewing.UI.Button("Annotation");a.onClick=()=>{this.panel.isVisible()?this.panel.setVisible(!1):this.panel.setVisible(!0)},a.addClass("fa"),a.addClass("fa-pencil"),a.addClass("fa-2x"),a.setToolTip("Annotation"),this.subToolbar=new Autodesk.Viewing.UI.ControlGroup("my-Annotation"),this.subToolbar.addControl(a),this.viewer.toolbar.addControl(this.subToolbar)}initialize(){this.panel.initializeMoveHandlers(this.panel.container);var b=angular.element(this.panel.container);a.init().then((a)=>{a&&(a.groupAnnotationPlugin?a.groupAnnotationPlugin.load((a)=>{this.model=a,this.func_success(this.model,b)}):(this.model=new Lst,a.add_attr({groupAnnotationPlugin:new Ptr(this.model)}),this.func_success(this.model,b)))})}func_success(a,b){var c=angular.element("<div class=\"_container\"></div>"),d=angular.element(`<md-button class="md-raised md-primary block" ng-click="exec_function('createTheme')">Create a group</md-button>`),g=document.createElement("div");g.className="themes",c.append(d),a.bind(()=>{g.innerHTML="",this.displayTheme(g,c,a)}),f(c)(e),b.append(c)}displayAnnotation(a){var b,c=this.model,d=`<md-list class='md-list-item-text' id="a_${a}">`;for(let d=0;d<c.length;d++){const e=c[d];if(e.id==a){b=e;break}}if(null!=b)for(let a=0;a<b.listModel.length;a++){const c=b.listModel[a];d+=`<md-list-item ng-click="" class="noright">
                <p class="noteTitle">${c.title.get()}</p>

              
                <md-button class="i_btn" aria-label="add_item" id=${c.id.get()} ng-click="exec_function('settingAnnotation','${b.id.get()}/${c.id.get()}')">
                  <i class="fa fa-wrench" aria-hidden="true"></i>
                </md-button>

              <!-- 
                <input class="i_btn input_color" value="${c.color.get()}" id="i_color" type='color' name='${c.id.get()}'/>

                <md-button class="i_btn show${c.id.get()}" id=${c.id.get()} aria-label="view" show="false">
                  <i class="fa fa-eye" aria-hidden="true"></i>
                </md-button>

                <md-button class="i_btn" id=${c.id.get()} aria-label="rename">
                  <i class="fa fa-pencil" aria-hidden="true"></i>
                </md-button>

                <md-button class="i_btn" id=${c.id.get()} aria-label="delete">
                  <i class="fa fa-trash" aria-hidden="true"></i>
                </md-button>

                <md-button class="i_btn" id=${c.id.get()} aria-label="info">
                  <i class="fa fa-comment" aria-hidden="true"></i>
                </md-button>

                <md-button class="i_btn" id=${c.id.get()} aria-label="info">
                  <i class="fa fa-paperclip" aria-hidden="true"></i>
                </md-button> 
              -->

            </md-list-item>`}return d+=`</md-list>`,d}displayTheme(a,b,d){var g,h,j=angular.element(`<md-list></md-list>`);if(0<d.length)for(let a=0;a<d.length;a++)h=d[a],g=angular.element(`
              <md-list-item>   
                <p id='p_${h.id.get()}' show="false" ng-click="exec_function('seeAnnotation','${h.id.get()}')">
                  <i class="fa fa-caret-right"></i>
                  &nbsp;
                  ${h.name.get()}
                </p>

                <md-button class="i_btn" aria-label="add_item" id=${h.id.get()} ng-click="exec_function('addNote','${h.id.get()}')">
                  <i class="fa fa-plus" aria-hidden="true"></i>
                </md-button>

                <md-button class="i_btn show${h.id.get()}" id=${h.id.get()} aria-label="view" show="false">
                  <i class="fa fa-eye" aria-hidden="true"></i>
                </md-button>

                <md-button class="i_btn" id=${h.id.get()} aria-label="rename">
                  <i class="fa fa-pencil" aria-hidden="true"></i>
                </md-button>

                <md-button class="i_btn" id=${h.id.get()} aria-label="delete">
                  <i class="fa fa-trash" aria-hidden="true"></i>
                </md-button>

              </md-list-item>

              ${this.displayAnnotation(h.id.get())}
            `),j.append(g);else j.append("<h1>No note created ! create one</h1>");var i=angular.element(a),k=angular.element(j);i.append(k),f(k)(e),b.append(i);var c=angular.element("<div class=\"item_selected\"></div>");b.append(c)}createTheme(){var a=this.model,c=new ThemeModel;c.id.set(newGUID()),c.creation.set(Date.now()),c.owner.set(this.user.id),c.username.set(this.user.username);var d=b.prompt().title("Theme").placeholder("Please enter the theme").ariaLabel("New Theme").clickOutsideToClose(!0).required(!0).ok("create!").cancel("Cancel");b.show(d).then((b)=>{c.name.set(b),a.push(c),console.log(this.model)},function(){})}createNote(a){var c,d=this.model;for(let b=0;b<d.length;b++){const e=d[b];if(e.id==a){c=e;break}}var e=new NoteModel;e.id.set(newGUID()),e.owner.set(this.user.id),e.username.set(this.user.username),e.date.set(Date.now()),e.color.set("#000000");var f=b.prompt().title("Note").placeholder("Note name").ariaLabel("New Note").clickOutsideToClose(!0).required(!0).ok("create").cancel("Cancel");b.show(f).then((a)=>{e.title.set(a),c.listModel.push(e)},function(){})}SeeAnnotation(a){var b=document.getElementById("p_"+a),c=document.getElementById("a_"+a),d=b.getElementsByTagName("i")[0];"false"==b.getAttribute("show")?(c.style.display="block",b.setAttribute("show","true"),d.setAttribute("class","fa fa-caret-down")):(c.style.display="none",b.setAttribute("show","false"),d.setAttribute("class","fa fa-caret-right"))}settingAnnotation(a){var b=this.model,c=a.split("/"),d=c[0],g=c[1];e.themeName,e.annotationSelected;var h;for(let c=0;c<b.length;c++){const a=b[c];if(a.id==d){e.themeName=a.name.get();for(let b=0;b<a.listModel.length;b++){const c=a.listModel[b];if(c.id==g){e.annotationSelected=c;break}}break}}h=e.annotationSelected.title;var i=document.getElementsByClassName("item_selected")[0];i.innerHTML="";var j=angular.element(i),k=angular.element(`
          <h1>{{themeName | uppercase}} > ${h}</h1>
          <br />
          <div layout="column" class="md-inline-form">
            <md-input-container class="md-block">
              <label>Name</label>
              <input id="_input" ng-model="annotationSelected.title" placeholder="title" ng-click="focus_input()">
            </md-input-container>

            <md-input-container class="md-block">
              <label>Color</label>
              <input ng-model="annotationSelected.color" type="color" placeholder="title">
            </md-input-container>

            <md-button class="md-raised md-primary block" ng-click="exec_function('save',annotationSelected, '${d}')">Save</md-button>

          </div>


        `);j.append(k),f(j)(e)}saveModification(a,b){var c=this.model;for(let d=0;d<c.length;d++){const a=c[d];if(a.id==b){for(let b=0;b<a.listModel.length;b++){const e=a.listModel[b];if(e.id==e.id){c[d].listModel[b].mod_attr(e);break}}break}}}})}]);

//# sourceMappingURL=app.compile.min.js.map
{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/app.config.js",
    "app/app.js",
    "app/app.route.js",
    "app/controllers/forgeViewerCtrl.js",
    "app/controllers/loginCtrl.js",
    "app/controllers/mainCtrl.js",
    "app/controllers/navbarCtrl.js",
    "app/directives/navbar.js",
    "app/run/filesPanel.js",
    "app/run/messagePanel.js",
    "app/run/plugin-annotation.js",
    "app/services/authService.js",
    "app/services/goldenLayoutService.js",
    "app/services/spinalCore.js",
    "app/services/spinalModelDictionary.js",
    "../spinal-lib-forgefile/forgefile.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "angular.module('settings', [])\n  .constant('config', {\n    main_path: '/',\n    spinalhub_url: '127.0.0.1',\n    spinalhub_port: '8888',\n    spinalhub_user: '168',\n  });",
    "angular.module('app.route', ['ngRoute']);\nangular.module('app.services', []);\nangular.module('app.directives', []);\nangular.module('app.controllers', []);\nangular.module('app.spinalcom', ['settings', 'ngMaterial']);\nangular.module('app.spinalforge.plugin', []);\n\nangular.module('SpinalApp', ['ngAnimate', 'ngMaterial', 'app.directives', 'app.route',\n    'app.services', 'app.controllers', 'ngMdIcons', 'settings', 'app.spinalcom', 'app.spinalforge.plugin', \"colorpicker.module\"\n  ])\n  .run(['$rootScope', '$location', 'authService', function ($rootScope, $location, authService) {\n    let user = authService.get_user();\n    $rootScope.$on('$routeChangeStart', function (event, next, current) {\n      if (next.$$route.authenticate) {\n        if (!authService.is_Connected()) {\n          authService.login(user.username, user.password)\n            .then(function () {},\n              function () {\n                $location.path('/login');\n              });\n        }\n      }\n    });\n  }])\n\n\n  .config([\"$mdThemingProvider\", function ($mdThemingProvider) {\n    $mdThemingProvider.theme('altTheme')\n      .primaryPalette('grey', {\n        'default': '200'\n      })\n      .accentPalette('grey', {\n        'default': '700'\n      })\n      .dark();\n    $mdThemingProvider.theme('default')\n      .dark();\n\n    $mdThemingProvider.setDefaultTheme('altTheme');\n    $mdThemingProvider.alwaysWatchTheme(true);\n  }]).run([\"$templateCache\", \"$http\", function ($templateCache, $http) {\n    let load_template = (uri, name) => {\n      $http.get(uri).then((response) => {\n        $templateCache.put(name, response.data);\n      }, (errorResponse) => {\n        console.log('Cannot load the file ' + uri);\n      });\n    };\n    let toload = [{\n      uri: 'app/templates/forgeviewer.html',\n      name: 'forgeviewer.html'\n    }];\n    for (var i = 0; i < toload.length; i++) {\n      load_template(toload[i].uri, toload[i].name);\n    }\n\n    // $templateCache.put('templateId.html', 'This is the content of the template');\n  }]);",
    "angular.module('app.route')\n  .config([\"$routeProvider\", \"$locationProvider\",\n    function ($routeProvider, $locationProvider) {\n      $routeProvider\n\n        .when(\"/viewer/:filepath\", {\n          templateUrl: \"app/templates/main.html\",\n          authenticate: true,\n          controller: 'mainCtrl'\n        })\n        .when(\"/login\", {\n          templateUrl: \"app/templates/login.html\",\n          authenticate: false,\n          controller: 'loginCtrl'\n        })\n        .when('/404', {\n          authenticate: false,\n          controller: ['$location', function ($location) {\n            $location.replace('/drive/');\n          }]\n        }).otherwise({\n          redirectTo: '/404'\n        });\n\n      // .otherwise({\n      //   redirectTo: '/viewer'\n      // });\n    }\n  ]);",
    "angular.module('app.spinalforge.plugin')\n  .controller('forgeViewerCtrl', [\"$scope\", \"$rootScope\", \"$mdDialog\", \"authService\", \"$compile\", \"$injector\", \"layout_uid\", \"spinalModelDictionary\",\"spinalRegisterViewerPlugin\",\n    function ($scope, $rootScope, $mdDialog, authService, $compile, $injector, layout_uid, spinalModelDictionary,spinalRegisterViewerPlugin) {\n      $scope.injector = $injector;\n      $scope.uid = layout_uid.get();\n      console.log(\"forgeviewerCtrl start\")\n\n      $rootScope.allNotes = []\n      // load etc..\n      $rootScope.allNotes = [\n        {\n          title: new Str(\"test1\"),\n        },\n        {\n          title: new Str(\"test1\"),\n        },\n        {\n          title: new Str(\"test1\"),\n        },\n        {\n          title: new Str(\"test1\"),\n        },\n            ]\n\n\n      spinalModelDictionary.init().then(function (ForgeFile) {\n        var viewerApp, viewables, indexViewable;\n        console.log(\"forgeviewerCtrl start 2\")\n        spinalRegisterViewerPlugin.register(\"Autodesk.ADN.Viewing.Extension.Color\");\n        var config3d = {\n          extensions:spinalRegisterViewerPlugin.get()\n        };\n        var options = {\n          env: 'AutodeskProduction',\n          accessToken: ''\n        };\n\n\n        var documentId = 'urn:' + ForgeFile.urn.get();\n        get_oAuthToken(ForgeFile, documentId, init_autodesk);\n\n        function get_oAuthToken(forgeFile, documentId, callback) {\n          forgeFile.oauth.set(\"\");\n          forgeFile.ask_token.set(true);\n          var ask_for_token = true;\n          var oauth_onchange = function () {\n            if (ask_for_token && forgeFile.oauth.get() != \"\") {\n              ask_for_token = false;\n              forgeFile.oauth.unbind(oauth_onchange);\n              options.accessToken = forgeFile.oauth.get();\n              callback(documentId);\n            }\n          };\n          forgeFile.oauth.bind(oauth_onchange);\n        }\n\n        function init_autodesk(documentId) {\n          Autodesk.Viewing.Initializer(options, function onInitialized() {\n            viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv' + $scope.uid);\n            viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Private.GuiViewer3D, config3d);\n            viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n          });\n        }\n\n\n        function onDocumentLoadSuccess(doc) {\n          viewables = viewerApp.bubble.search({\n            'type': 'geometry',\n            'role': '3d'\n          });\n          if (viewables.length === 0) {\n            console.error('Document contains no viewables.');\n            return;\n          }\n          viewerApp.selectItem(viewables[viewables.length - 1].data, onItemLoadSuccess, onItemLoadFail);\n        }\n\n\n        function onDocumentLoadFailure(viewerErrorCode) {\n          console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\n        }\n\n\n        function onItemLoadSuccess(viewer, item) {\n          viewer.scope = $scope;\n          console.log('Viewers are equal: ' + (viewer === viewerApp.getCurrentViewer()));\n        }\n\n\n        function onItemLoadFail(errorCode) {\n          console.error('onItemLoadFail() - errorCode:' + errorCode);\n        }\n\n      });\n\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('loginCtrl', [\"$scope\", \"authService\", \"$mdToast\", \"$location\",\n    function ($scope, authService, $mdToast, $location) {\n      let toast = $mdToast.simple()\n        .hideDelay(3000);\n      let user = authService.get_user();\n      authService.logout();\n      $scope.conf = {\n        email: \"\",\n        password: \"\"\n      };\n      $scope.ConnectBtn = () => {\n        authService.login($scope.conf.email, $scope.conf.password).then(\n          () => {\n            $location.path('/home');\n          },\n          (err) => {\n            toast.textContent(err);\n            $mdToast.show(toast);\n          }\n        );\n      };\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('mainCtrl', [\"$scope\", \"$routeParams\", \"goldenLayoutService\", \"spinalModelDictionary\",\n    function ($scope, $routeParams, goldenLayoutService, spinalModelDictionary) {\n      goldenLayoutService.init();\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('navbarCtrl', [\"$scope\", \"authService\", \"$location\", \"$routeParams\",\n    function ($scope, authService, $location, $routeParams) {\n      $scope.username = \"\";\n      $scope.connected = false;\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n        $scope.connected = true;\n        $scope.viewer = $routeParams.filepath;\n        if ($scope.viewer) {\n          $scope.viewer = atob($scope.viewer);\n        } else {\n          $scope.viewer = \"viewer\";\n        }\n        console.log($routeParams.filepath);\n\n      });\n      $scope.logout = () => {\n        $location.path('/login');\n      };\n      // get in SpinalDrive_Env\n      $scope.layouts = [\n\n        {\n          id: \"drag-viewer\",\n          name: \"viewer\",\n          cfg: {\n            isClosable: true,\n            title: \"viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }\n        },\n\n\n      ];\n\n\n\n\n\n    }\n  ]);",
    "angular.module('app.directives')\n  .directive(\"navbar\", [\n    function () {\n      return {\n        restrict: 'E',\n        templateUrl: 'app/templates/navbar.html',\n        controller: 'navbarCtrl',\n      };\n    }\n  ])\n  .directive(\"menuGlayout\", ['goldenLayoutService', '$timeout',\n    function (goldenLayoutService, $timeout) {\n      return {\n        restrict: 'E',\n        scope: {\n          layoutInfo: '=info'\n        },\n        replace: true,\n        template: '<li ng-repeat=\\\"layout in layoutInfo\\\"  id=\\\"{{layout.id}}\\\"><a >{{layout.name}}</a></li>',\n        link: (scope, element, attrs) => {\n          goldenLayoutService.wait_ready().then(() => {\n            let create_callback = (goldenLayoutService, layout) => {\n              return () => {\n                goldenLayoutService.createChild(layout.cfg);\n              };\n            };\n            for (var i = 0; i < scope.layoutInfo.length; i++) {\n              let layout = scope.layoutInfo[i];\n              goldenLayoutService.createDragSource($(\"#\" + layout.id)[0], layout.cfg);\n              $(\"#\" + layout.id).click(create_callback(goldenLayoutService, layout));\n            }\n          });\n        }\n      };\n    }\n  ])\n  .directive('ngRightClick', [\"$parse\", function ($parse) {\n    return function (scope, element, attrs) {\n      var fn = $parse(attrs.ngRightClick);\n      element.bind('contextmenu', function (event) {\n        scope.$apply(function () {\n          event.preventDefault();\n          fn(scope, {\n            $event: event\n          });\n        });\n      });\n    };\n  }]);",
    "\nangular.module('app.spinalforge.plugin').run([\"$mdDialog\", \"$mdToast\",\"$rootScope\",\"$compile\",\nfunction ($mdDialog,$mdToast, $rootScope,$compile) {\n    window.FilesPanel = class FilesPanel {\n        constructor(viewer,notes,user){\n            this.viewer = viewer;\n            this.filePanel = null;\n            this.filePanelContent = null;\n            this.model = notes;\n            this.user = user;\n            this._file_selected = null;\n\n            $rootScope.execute_func = (name,id) => {\n                switch (name) {\n                    case \"delete_file\":\n                        this.RemoveFile(id);\n                        break;\n                \n                    case \"download_file\":\n                    this.DownloadFile(id)\n                        break;\n                }\n            }\n        }\n\n        DownloadFile(id) {\n            var selected;\n            for(let i = 0; i < this._file_selected.files.length; i++) {\n                selected = this._file_selected.files[i];\n                if(selected._info.id == id) {\n                selected.load( (model,error) => {\n                    if(model instanceof Path) {\n                    // window.open(\"/sceen/_?u=\" + model._server_id, \"Download\");\n                    var element = document.createElement('a');\n                    element.setAttribute('href', \"/sceen/_?u=\" + model._server_id);\n                    element.setAttribute('download', selected.name);\n\n                    element.style.display = 'none';\n                    document.body.appendChild(element);\n\n                    element.click();\n\n                    document.body.removeChild(element);\n                    }\n                });\n                break;\n                }\n            }\n        }\n\n\n        RemoveFile(id) {\n            var dialog = $mdDialog.confirm()\n            .ok(\"Delete !\")\n            .title('Do you want to remove it?')\n            .cancel('Cancel')\n            .clickOutsideToClose(true);\n        \n            $mdDialog.show(dialog)\n            .then((result) => {\n                for (let i = 0; i < this._file_selected.files.length; i++) {\n                    if(this._file_selected.files[i]._info.id == id) {\n                        this._file_selected.files.splice(i,1);\n                        break;\n                    }\n                }\n            }, function(){});\n        }\n\n\n        handle_files(files) {\n            var file,filePath,mod_file;\n\n            if(files.length > 0) {\n                for(let i = 0; i < files.length; i++) {\n                    filePath = new Path(files[i]);\n\n                    this._file_selected.files.force_add_file(files[i].name,filePath,{id : newGUID()})\n                }\n            }\n        }\n\n        DisplayFilePanel(themeId, annotationId) {\n            var notes = this.model;\n\n            if(this.filePanel == null) {\n                this.filePanel = new PanelClass(this.viewer,annotationId);\n                this.filePanel.initializeMoveHandlers(this.filePanel.container);\n                this.filePanel.container.appendChild(this.filePanel.createCloseButton());\n                this.filePanel.container.style.right = \"0px\";\n                this.filePanel.container.style.width = \"400px\";\n                this.filePanel.container.style.height = \"600px\";\n                this.filePanel.container.padding = \"0px\";\n                // }\n\n                // if(this.filePanelContent == null) {\n                this.filePanelContent = document.createElement('div');\n                this.filePanelContent.className = \"file_panel_content\";\n\n                var dragDrop = document.createElement('div');\n                dragDrop.className = \"dragDrop\";\n                \n                var input = document.createElement('input');\n                input.type = 'file';\n                input.id = \"modal-new-dropzone-input\";\n                input.setAttribute(\"multiple\",\"true\");\n                input.className = \"modal-new-dropzone-input\";\n\n                input.onchange = () => {\n                    return this.handle_files(input.files);\n                }\n\n                var file_container = document.createElement('label');\n                file_container.innerHTML = `\n                                    <span class=\"modal-new-span-upload\">\n                                        click to Choose files to upload or Drop them here\n                                    </span>\n                                    <ul id=\"modal-new-list-upload\"></ul>`;\n\n                file_container.className = \"text-center\"\n\n                file_container.ondrop = (evt) => {\n                    evt.stopPropagation();\n                    evt.preventDefault();\n\n                    this.handle_files(evt.dataTransfer.files);\n                }\n\n                file_container.ondragover = (evt) => {\n                    evt.preventDefault();\n                }\n\n                file_container.htmlFor = \"modal-new-dropzone-input\"\n\n\n                dragDrop.appendChild(input);\n                dragDrop.appendChild(file_container);\n                \n                \n                this.filePanelContent.appendChild(dragDrop);\n\n                var files_div = document.createElement('div');\n                files_div.className = 'files_div';\n\n                this.filePanelContent.appendChild(files_div);\n                this.filePanel.container.appendChild(this.filePanelContent);\n            \n            }\n            \n\n            \n            this.filePanel.setVisible(true);\n            \n\n            for (let index = 0; index < notes.length; index++) {\n                if(notes[index].id == themeId){\n                    for (let i = 0; i < notes[index].listModel.length; i++) {\n                        if(notes[index].listModel[i].id == annotationId){\n                            this._file_selected = notes[index].listModel[i];\n                            break;\n                        }      \n                    }\n                    \n                    break;\n                }   \n            }\n\n            this.filePanel.setTitle(this._file_selected.title.get());\n\n            notes.bind(() => {\n                this.files_display();\n            })\n\n        }\n\n\n        displayItem(_file,parent) {\n            var items = `<md-list-item>\n                        <p class=\"noteTitle\">${_file.name.get()}</p>\n\n                        <md-button class=\"i_btn\" aria-label=\"add_item\" id=${_file._info.id.get()} ng-click=\"execute_func('delete_file','${_file._info.id.get()}')\">\n                            <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                        </md-button>\n\n                        <md-button class=\"i_btn\" aria-label=\"add_item\" id=${_file._info.id.get()} ng-click=\"execute_func('download_file','${_file._info.id.get()}')\">\n                            <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n                        </md-button>\n                    </md-list-item>`; \n\n            var content = angular.element(items);\n\n            parent.append(content);\n            $compile(content)($rootScope);\n        }\n\n        files_display() {\n\n            var files = document.getElementsByClassName(\"files_div\")[0];\n            files.innerHTML = \"\";\n\n            var contener = angular.element(files);\n\n            var div = angular.element('<md-list>\\\n                </md-list>');\n\n\n            contener.append(div);\n            $compile(div)($rootScope);\n\n            var _file;\n\n            for (let i = 0; i < this._file_selected.files.length; i++) {\n                _file = this._file_selected.files[i];\n                this.displayItem(_file,div);\n            }\n\n        }\n\n    }\n\n}]);",
    "\n\nclass MessagePanel {\n    constructor(viewer,notes,user) {\n        this.detailPanel = null;\n        this.detailPanelContent = null;\n        this.model = notes;\n        this.viewer = viewer;\n        this._selected = null;\n        this.user = user;\n    }\n\n    DetailPanel(themeId,annotationId) {\n        var notes = this.model;\n\n        console.log(\"theme id : \", themeId);\n        console.log(\"annotation id : \", annotationId);\n\n        if(this.detailPanelContent == null){\n            this.detailPanelContent = document.createElement('div');\n            this.detailPanelContent.className = \"content\";\n        }\n\n        if(this.detailPanel == null) {\n            this.detailPanel = new PanelClass(this.viewer,annotationId);\n            this.detailPanel.initializeMoveHandlers(this.detailPanel.container);\n            this.detailPanel.container.appendChild(this.detailPanel.createCloseButton());\n            this.detailPanel.container.style.right = \"0px\";\n            this.detailPanel.container.style.width = \"400px\";\n            this.detailPanel.container.style.height = \"600px\";\n            this.detailPanel.container.padding = \"0px\";\n\n        }\n\n        for (let index = 0; index < notes.length; index++) {\n            if(notes[index].id == themeId){\n                for (let i = 0; i < notes[index].listModel.length; i++) {\n                    if(notes[index].listModel[i].id == annotationId) {\n                        this._selected = notes[index].listModel[i];\n                        break;\n                    }\n                    \n                }\n                break;   \n            }   \n        }\n\n        var formDiv = document.createElement('div');\n        formDiv.className = \"form_div\";\n\n\n        var textareaDiv = document.createElement('div');\n        textareaDiv.className = \"textarea_div\";\n\n        var inputText = document.createElement('textarea');\n        inputText.className = \"form-control\";\n        inputText.setAttribute('rows','2')\n        inputText.id = this._selected.id.get();\n        inputText.placeholder = \"add texte\";\n\n        inputText.onclick = () => {\n            inputText.focus();\n        }\n\n        textareaDiv.appendChild(inputText);\n\n        var sendButtonDiv = document.createElement('div');\n        sendButtonDiv.className = \"send_button_div\"\n\n        var sendButton = document.createElement('button');\n        sendButton.className = \"btn btn-block\";\n        sendButton.textContent = \"Add\";\n        sendButton.id = this._selected.id.get();;\n\n        sendButton.onclick = () => {\n            var textAreaValue = document.querySelector(`textarea[id='${sendButton.id}']`).value;\n            document.querySelector(`textarea[id='${sendButton.id}']`).value = \"\";\n\n            if(textAreaValue != \"\" && textAreaValue.trim() != \"\") {\n                var message = new MessageModel();\n                message.id.set(newGUID());\n                message.owner.set(this.user.id);\n                message.username.set(this.user.username);\n                message.date.set(Date.now());\n                message.message.set(textAreaValue);\n\n                this._selected.notes.push(message);\n            }\n\n        }\n\n        sendButtonDiv.appendChild(sendButton);\n        \n        formDiv.appendChild(textareaDiv);\n        formDiv.appendChild(sendButtonDiv);\n        \n        this.detailPanel.setVisible(true);\n        \n        notes.bind( () => {   \n            this.DisplayMessage(formDiv)\n        });\n\n\n    }\n\n    DisplayMessage(formDiv) {\n        var _self = this;\n        var messageContainer = document.createElement('div');\n        messageContainer.className = \"messageContainer\"; \n\n        for (let i = 0; i < this._selected.notes.length; i++) {\n            //message div\n            var message_div = document.createElement('div');\n            message_div.className = \"message_div\";\n\n            //header message\n            var _message = document.createElement('div');\n            _message.className = \"_message\";\n            \n            //name\n            var message_owner = document.createElement('div');\n            message_owner.className = \"message_owner\";\n            message_owner.innerText = this._selected.notes[i].username.get();\n\n\n            //date\n            var message_date = document.createElement('div');\n            message_date.className = \"message_date\";\n            var date = new Date(parseInt(this._selected.notes[i].date));\n            message_date.innerText =   date.getDate() + \"/\" + date.getMonth() + 1 + \"/\" + date.getFullYear();\n\n            \n\n            //message content\n            var message_content = document.createElement('div');\n            message_content.className = \"message_content\";\n\n            var message_texte = document.createElement('div');\n            message_texte.className = \"message_texte\";\n            message_texte.innerHTML = this._selected.notes[i].message;\n\n            if(this._selected.notes[i].owner == this.user.id) {\n                var closeDiv = document.createElement('div');\n                closeDiv.className = \"close_div\";\n\n                var span = document.createElement('span');\n                span.innerHTML = \"X\";\n                span.className = \"close\";\n                span.id = this._selected.notes[i].id\n\n                span.onclick = function(){\n                    // var dialog = $mdDialog.confirm()\n                    //     .ok(\"Delete !\")\n                    //     .title('Do you want to remove it?')\n                    //     .cancel('Cancel')\n                    //     .clickOutsideToClose(true);\n                \n                    //     $mdDialog.show(dialog)\n                    //     .then((result) => {\n                    _self.deteteMessage(this.id,formDiv);\n                    // }, function(){});\n                \n                }\n\n                closeDiv.appendChild(span);\n                message_content.appendChild(closeDiv);\n            }\n\n            message_content.appendChild(message_texte);\n\n            _message.appendChild(message_owner);\n            _message.appendChild(message_content);\n            \n\n\n            message_div.appendChild(message_date);\n            message_div.appendChild(_message);\n            \n\n            messageContainer.appendChild(message_div);\n\n        }\n\n\n        this.detailPanelContent.innerHTML = \"\";\n\n        this.detailPanelContent.appendChild(messageContainer);\n        this.detailPanelContent.appendChild(formDiv);\n\n        this.detailPanel.setTitle(this._selected.title.get());\n        this.detailPanel.container.appendChild(this.detailPanelContent);\n\n        var d = document.getElementsByClassName(\"messageContainer\")[0];\n        d.scrollTop = d.scrollHeight;\n\n    }\n\n    deteteMessage(id, formDiv) {\n    \n        for (let i = 0; i < this._selected.notes.length; i++) {\n            \n            if(this._selected.notes[i].id == id) {\n            this._selected.notes.splice(i,1);\n            break;\n            }\n            \n        }\n\n    }\n}",
    "import { ThemeModel } from \"../../../spinal-lib-forgefile/forgefile\";\n\nlet appSpinalforgePlugin = angular.module('app.spinalforge.plugin');\nappSpinalforgePlugin.run([\"$rootScope\", \"$compile\", \"$templateCache\", \"$http\", \"spinalRegisterViewerPlugin\",\n    function ($rootScope, $compile, $templateCache, $http, spinalRegisterViewerPlugin) {\n      spinalRegisterViewerPlugin.register(\"PannelAnnotation\");\n      // var extensions = ['PannelAnnotation', \"Autodesk.ADN.Viewing.Extension.Color\"];\n\n      let load_template = (uri, name) => {\n        $http.get(uri).then((response) => {\n          $templateCache.put(name, response.data);\n        }, (errorResponse) => {\n          console.log('Cannot load the file ' + uri);\n        });\n      };\n      let toload = [{\n        uri: 'app/templates/annotationTemplate.html',\n        name: 'annotationTemplate.html'\n      }];\n      for (var i = 0; i < toload.length; i++) {\n        load_template(toload[i].uri, toload[i].name);\n      }\n\n\n      class PannelAnnotation {\n        constructor(viewer, options) {\n          Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n        }\n\n        load() {\n          if (this.viewer.toolbar) {\n            this.createUI();\n          } else {\n            this.onToolbarCreatedBinded = this.onToolbarCreated.bind(this);\n            this.viewer.addEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n          }\n          return true;\n        }\n\n        onToolbarCreated() {\n          this.viewer.removeEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n          this.onToolbarCreatedBinded = null;\n          this.createUI();\n        }\n\n        unload() {\n          this.viewer.toolbar.removeControl(this.subToolbar);\n          return true;\n        }\n\n        createUI() {\n          var title = 'Annotation';\n          this.panel = new PanelClass(this.viewer, title);\n          var button1 = new Autodesk.Viewing.UI.Button('Annotation');\n\n          button1.onClick = (e) => {\n            if (!this.panel.isVisible()) {\n              this.panel.setVisible(true);\n            } else {\n              this.panel.setVisible(false);\n            }\n          };\n\n          button1.addClass('fa');\n          button1.addClass('fa-pencil');\n          button1.addClass('fa-2x');\n          button1.setToolTip('Annotation');\n\n          this.subToolbar = this.viewer.toolbar.getControl(\"my-Annotation\");\n          if (!this.subToolbar) {\n            this.subToolbar = new Autodesk.Viewing.UI.ControlGroup('my-Annotation');\n            this.viewer.toolbar.addControl(this.subToolbar);\n          }\n          this.subToolbar.addControl(button1);\n          this.initialize();\n        }\n\n        initialize() {\n          var _container = document.createElement('div');\n          _container.style.height = \"calc(100% - 45px)\";\n          _container.style.overflowY = 'auto';\n          this.panel.container.appendChild(_container);\n\n          $(_container).html(\"<div ng-controller=\\\"annotationCtrl\\\" ng-cloak>\" +\n            $templateCache.get(\"annotationTemplate.html\") + \"</div>\");\n          $compile($(_container).contents())($rootScope);\n        }\n      } // end class\n      Autodesk.Viewing.theExtensionManager.registerExtension('PannelAnnotation', PannelAnnotation);\n    } // end run\n  ])\n\n  //---------------------------------------------------------------------------------------------------------\n\n\n  .controller('annotationCtrl', [\"$scope\", \"$rootScope\", \"$mdToast\", \"$mdDialog\", \"authService\", \"$compile\", \"$injector\", \"layout_uid\", \"spinalModelDictionary\", \"$q\",\n    function ($scope, $rootScope, $mdToast, $mdDialog, authService, $compile, $injector, layout_uid, spinalModelDictionary, $q) {\n      var viewer = v;\n      $scope.user = authService.get_user();\n      $scope.headerBtnClick = (btn) => {\n        console.log(\"headerBtnClick\");\n        console.log(btn);\n\n        if(btn.label == \"add theme\") {\n          $scope.addTheme();\n        }\n      };\n\n      $scope.headerBtn = [{\n          label: \"add theme\",\n          icon: \"note_add\"\n        }\n        // ,\n        // {\n        //   label: \"visibility\",\n        //   icon: \"visibility\",\n        //   toggleIcon: \"\"\n        // },\n        // {\n        //   label: \"visibility cancel\",\n        //   icon: \"visibility_off\"\n        // },\n      ];\n      $scope.currentVisibleObj = [];\n\n      $scope.themes = [];\n      spinalModelDictionary.init().then((m) => {\n        if (m) {\n          if (m.groupAnnotationPlugin) {\n            m.groupAnnotationPlugin.load((mod) => {\n              $scope.themeListModel = mod;\n              $scope.themeListModel.bind($scope.onModelChange);\n            });\n          } else {\n            $scope.themeListModel = new Lst();\n            m.add_attr({\n              groupAnnotationPlugin: new Ptr($scope.themeListModel)\n            });\n            $scope.themeListModel.bind($scope.onModelChange);\n          }\n        }\n      });\n\n      function deferObjRdy(model, promise) {\n        if (FileSystem._tmp_objects[model._server_id]) {\n          setTimeout(() => {\n            deferObjChange(model, promise);\n          }, 200);\n          return;\n        }\n        promise.resolve(model);\n      }\n\n      $scope.waitObjRdy = (model) => {\n        let deferred = $q.defer();\n        deferObjRdy(model, deferred);\n        return deferred.promise;\n      };\n\n      $scope.onModelChange = () => {\n        $scope.themes = [];\n        let promiseLst = [];\n        for (var i = 0; i < $scope.themeListModel.length; i++) {\n          let note = $scope.themeListModel[i];\n          promiseLst.push($scope.waitObjRdy(note));\n        }\n        $q.all(promiseLst).then((res) => {\n          $scope.themes = [];\n          for (var i = 0; i < $scope.themeListModel.length; i++) {\n            let note = $scope.themeListModel[i];\n            let mod = note.get_obj();\n            mod._server_id = note._server_id;\n            $scope.themes.push(mod);\n            if ($scope.selectedNote && $scope.selectedNote._server_id == mod._server_id) {\n              $scope.selectedNote = mod;\n            }\n            // $scope.$apply();\n\n            // chcck if aplly color\n          }\n\n        });\n      };\n\n\n      $scope.addTheme = () => {\n        $mdDialog.show($mdDialog.prompt()\n            .title(\"Add Theme\")\n            .placeholder('Please enter the Name')\n            .ariaLabel('Add Theme')\n            .clickOutsideToClose(true)\n            .required(true)\n            .ok('Confirm').cancel('Cancel'))\n          .then(function (result) {\n            var newTheme = new ThemeModel();\n            newTheme.name.set(result);\n            newTheme.owner.set($scope.user.id);\n            newTheme.username.set($scope.user.username);\n            \n            $scope.themeListModel.push(newTheme);\n            \n          }, () => {});\n      }\n\n      $scope.$on('colorpicker-closed', function (data1,data2) {\n\n        console.log(data1);\n        console.log(data2);\n\n        // update moedels via $scope.themes\n        for (var i = 0; i < $scope.themes.length; i++) {\n          let note = $scope.themes[i];\n          for (var j = 0; j < note.listModel.length; j++) {\n            let annotation = note.listModel[j];\n\n            let mod = FileSystem._objects[annotation._server_id];\n\n\n            if (mod) {\n              mod.color.set(annotation.color);\n            }\n          }\n        }\n      });\n\n      $scope.selectedNote = null;\n\n      $scope.selectedStyle = (note) => {\n        return note === $scope.selectedNote ? \"background-color: #4185f4\" : '';\n      };\n\n      $scope.getViewIcon = (note) => {\n\n        return note.display ? \"visibility_off\" : \"visibility\";\n      };\n\n      $scope.selectNote = (note) => {\n        $scope.selectedNote = note;\n      };\n\n      $scope.renameNote = (note) => {\n        $mdDialog.show($mdDialog.prompt()\n            .title(\"Rename\")\n            .placeholder('Please enter the title')\n            .ariaLabel('Rename')\n            .clickOutsideToClose(true)\n            .required(true)\n            .ok('Confirm').cancel('Cancel'))\n          .then(function (result) {\n            let mod = FileSystem._objects[note._server_id];\n\n            console.log(mod);\n\n            if (mod) {\n              if(mod.title)\n                mod.title.set(result);\n              else {\n                mod.name.set(result);\n              }\n            }\n          }, () => {});\n      };\n\n      $scope.ViewAllNotes = (theme) => {\n        theme.view = !theme.view;\n      };\n\n      $scope.addNoteInTheme = (theme) => {\n        $mdDialog.show($mdDialog.prompt()\n            .title(\"Add Note\")\n            .placeholder('Please enter the title')\n            .ariaLabel('Add Note')\n            .clickOutsideToClose(true)\n            .required(true)\n            .ok('Confirm')\n            .cancel('Cancel')\n          )\n          .then(function (result) {\n            let mod = FileSystem._objects[theme._server_id];\n\n            \n            var annotation = new NoteModel();\n\n            annotation.title.set(result);\n            annotation.color.set('#000000');\n            annotation.owner.set($scope.user.id);\n            annotation.username.set($scope.user.username);\n\n            \n            if(mod) {\n              mod.listModel.push(annotation);\n            } else {\n              console.log(\"mod null\");\n            }\n\n          }, () => {\n            console.log(\"canceled\")\n          });\n      };\n\n      $scope.deleteNote = (theme,note = null) => {\n        console.log(note);\n        var dialog = $mdDialog.confirm()\n              .ok(\"Delete !\")\n              .title('Do you want to remove it?')\n              .cancel('Cancel')\n              .clickOutsideToClose(true);\n        \n              $mdDialog.show(dialog)\n              .then((result) => {\n                \n                if(note != null) {\n                  for (var i = 0; i < $scope.themeListModel.length; i++) {\n                    var themeS = $scope.themeListModel[i];\n                    if(themeS._server_id == theme._server_id) {\n                      for (var j = 0; j < themeS.listModel.length; j++) {\n                        var annotation = themeS.listModel[j];\n\n                        if(annotation._server_id == note._server_id) {\n                          $scope.themeListModel[i].listModel.splice(j,1);\n                          break;\n                        }\n                      }\n                      break;\n                    }\n                  }\n                } else {\n                  for (var i = 0; i < $scope.themeListModel.length; i++) {\n                    var themeS = $scope.themeListModel[i];\n                    if(themeS._server_id == theme._server_id) {\n                      $scope.themeListModel.splice(i,1);\n                      break;\n                    }\n                  }\n                }\n\n\n                \n              }, () => {})\n      };\n  \n\n      $scope.addItemInNote = (annotation) => {\n\n        var items = viewer.getSelection();\n\n        if (items.length == 0) {\n          alert('No model selected !');\n          return;\n        }\n\n        viewer.model.getBulkProperties(items, {\n          propFilter: ['name']\n        }, (models) => {\n\n          let mod = FileSystem._objects[annotation._server_id];\n\n          if(mod) {\n            for (var i = 0; i < models.length; i++) { \n                mod.allObject.push(models[i]);\n            }\n\n            var toast = $mdToast.simple()\n          .content(\"Item added !\")\n          .action('OK')\n          .highlightAction(true)\n          .hideDelay(0)\n          .position('bottom right')\n          .parent(\"body\");\n  \n          $mdToast.show(toast);\n            \n          }\n\n        })\n\n      }\n\n\n      $scope.changeItemColor = (theme) => {\n        var ids = [];\n        // var selected;\n        // var notes = this.model;\n        // for (var i = 0; i < notes.length; i++) {\n        //   if (notes[i].id == id) {\n        //     selected = notes[i];\n        //     for (var j = 0; j < selected.allObject.length; j++) {\n\n        //       ids.push(selected.allObject[j].dbId.get());\n        //     }\n        //   }\n        // }\n\n        let mod = FileSystem._objects[theme._server_id];\n\n        if(mod) {\n          for (var i = 0; i < mod.allObject.length; i++) {\n            ids.push(mod.allObject[i]);\n          }\n\n          if(mod.display == false)\n            mod.display.set(true);\n\n          console.log(\"ids\",ids);\n          console.log(\"mod.color\",mod.color);\n          console.log(\"mod._server_id\",mod._server_id);\n\n          viewer.setColorMaterial(ids, mod.color, mod._server_id);\n        }\n      }\n\n\n      $scope.restoreColor = (theme) => {\n        var ids = [];\n        // var selected;\n        // var notes = this.model;\n        // for (var i = 0; i < notes.length; i++) {\n        //   if (notes[i].id == id) {\n        //     selected = notes[i];\n        //     for (var j = 0; j < selected.allObject.length; j++) {\n        //       ids.push(selected.allObject[j].dbId.get());\n        //     }\n        //   }\n        // }\n\n        let mod = FileSystem._objects[theme._server_id];\n\n        if(mod) {\n          for (var i = 0; i < mod.allObject.length; i++) {\n            ids.push(mod.allObject[i]);\n          }\n\n          if(mod.display == true)\n            mod.display.set(false);\n\n          viewer.restoreColorMaterial(ids, mod._server_id);\n        }\n\n      }\n\n\n      $scope.chatNote = (theme) => {\n\n      };\n\n      \n\n      // changeAllItemsColor() {\n      //   var objects = [];\n      //   var notes = this.model;\n      //   for (var i = 0; i < notes.length; i++) {\n      //     var ids = [];\n      //     var color;\n      //     for (var j = 0; j < notes[i].allObject.length; j++) {\n      //       ids.push(notes[i].allObject[j].dbId.get());\n      //     }\n      //     color = notes[i].color.get();\n      //     objects.push({\n      //       ids: ids,\n      //       color: color,\n      //       id: notes[i].id\n      //     });\n      //   }\n      //   this.viewer.colorAllMaterials(objects);\n      // }\n\n      // restoreAllItemsColor() {\n      //   var objects = [];\n      //   var notes = this.model;\n      //   for (var i = 0; i < notes.length; i++) {\n      //     var ids = [];\n\n      //     for (var j = 0; j < notes[i].allObject.length; j++) {\n      //       ids.push(notes[i].allObject[j].dbId.get());\n      //     }\n      //     objects.push({\n      //       ids: ids,\n      //       id: notes[i].id\n      //     });\n      //   }\n      //   this.viewer.restoreAllMaterialColor(objects);\n      // }\n\n    }\n  ]);",
    "angular.module('app.spinalcom')\n  .factory('authService', [\"$q\", \"ngSpinalCore\", \"config\", \"$http\",\n    function ($q, ngSpinalCore, config, $http) {\n      let factory = {};\n      let user = {\n        username: \"\",\n        password: \"\",\n        id : \"\"\n      };\n      let is_Connected = false;\n      factory.save_user = (username, password, id) => {\n        user.username = username;\n        user.password = password;\n        user.id = id;\n        window.localStorage.setItem(\"spinalhome_cfg\", btoa(JSON.stringify(user)));\n      };\n      factory.get_user = () => {\n        let _user = window.localStorage.getItem(\"spinalhome_cfg\");\n        if (_user) {\n          user = JSON.parse(atob(_user));\n        }\n        return user;\n      };\n\n      factory.logout = (username, password) => {\n        if (user.username != \"\") {\n          factory.save_user(\"\", \"\",\"\");\n          location.reload();\n        }\n      };\n\n      factory.login = (username, password) => {\n        let deferred = $q.defer();\n        let url = \"/get_user_id\";\n        $http.get(url + \"?u=\" + username + \"&p=\" + password)\n          .then(function (data) {\n            var u = parseInt(data.data);\n            var i = 0;\n            if (u == -1) {\n              let msg = (\"Login Error: username / password pair not found.\");\n              // $mdToast.show(loginError_toast)\n              deferred.reject(msg);\n              for (i = 0; i < wait_connectList.length; i++) {\n                wait_connectList[i].reject();\n              }\n              wait_connectList = [];\n              return;\n            }\n            ngSpinalCore.connect(\"http://\" + u + \":\" + password +\n              \"@\" + config.spinalhub_url + \":\" + config.spinalhub_port + \"/\");\n            factory.save_user(username, password,u);\n            is_Connected = true;\n            deferred.resolve();\n            for (i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].resolve();\n            }\n            wait_connectList = [];\n          }, function (data) {\n            let msg = ('Connection Error: Imposible to connect to the server.');\n            // $mdToast.show(connectionError_toast)\n            deferred.reject(msg);\n            for (var i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].reject();\n            }\n            wait_connectList = [];\n          });\n        return deferred.promise;\n      };\n\n      factory.is_Connected = () => {\n        return is_Connected;\n      };\n      let wait_connectList = [];\n      factory.wait_connect = () => {\n        let deferred = $q.defer();\n        if (is_Connected == true) {\n          deferred.resolve();\n        } else\n          wait_connectList.push(deferred);\n        return deferred.promise;\n      };\n\n      return factory;\n    }\n  ]);",
    "angular.module('app.services')\n  .factory('goldenLayoutService', ['$q', '$window', '$templateCache', '$rootScope', '$compile',\n    function ($q, $window, $templateCache, $rootScope, $compile) {\n      var config = {\n        content: [{\n          type: 'row',\n          content: [{\n            isClosable: false,\n            title: \"Viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }]\n        }]\n      };\n      let myLayout = 0;\n      let factory = {};\n      factory.init = () => {\n        if (myLayout == 0) {\n          myLayout = new GoldenLayout(config, $(\"#g-layout\"));\n          myLayout.registerComponent('SpinalHome', function (container, state) {\n            var element = container.getElement();\n            if (state.template == '') {\n\n              element.html();\n              $compile(element.contents())($rootScope);\n            } else {\n              element.html(\"<div class=\\\"gpannel-content\\\" ng-controller=\\\"\" + state.controller + \"\\\" ng-cloak>\" +\n                $templateCache.get(state.template) + \"</div>\");\n              $compile(element.contents())($rootScope);\n            }\n          });\n\n          myLayout.init();\n          angular.element($window).bind('resize', function () {\n            myLayout.updateSize();\n          });\n          $rootScope.$emit(\"GoldenLayout_READY\");\n        }\n      };\n\n      factory.wait_ready = () => {\n        return $q(function (resolve, reject) {\n          $rootScope.$on(\"GoldenLayout_READY\", () => {\n            resolve();\n          });\n        });\n      };\n\n\n\n      factory.createChild = (config) => {\n        myLayout.root.contentItems[0].addChild(config);\n      };\n\n      factory.createDragSource = (element, config) => {\n        myLayout.createDragSource(element, config);\n\n      };\n\n\n      return factory;\n    }\n  ])\n  .factory('layout_uid', function () {\n    let uid = 0;\n    return ({\n      get: () => {\n        let id = uid++;\n        return id;\n      }\n    });\n  })\n\n  .factory('spinalRegisterViewerPlugin', function () {\n    let plugin = [];\n    return ({\n    get: () => {\n    return plugin;\n    },\n    register: (name) => {\n    for (var i = 0; i < plugin.length; i++) {\n    if (plugin[i] === name) {\n    return;\n    }\n      }\n        plugin.push(name);\n      }\n    });\n  });",
    "angular.module('app.spinalcom')\n  .factory('ngSpinalCore', ['$q', function ($q) {\n    var service = {};\n    service.conn = 0;\n\n    service.connect = function (option) {\n      service.conn = spinalCore.connect(option);\n    };\n    service.store = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.store(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load = function (path) {\n      var deferred = $q.defer();\n      spinalCore.load(service.conn, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_type = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.load_type(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_right = function (ptr) {\n      var deferred = $q.defer();\n      spinalCore.load_right(service.conn, ptr, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.share_model = function (data, filename, flag, target_username) {\n      return spinalCore.share_model(service.conn, data, filename, flag, target_username);\n    };\n    return service;\n  }]);",
    "angular.module('app.spinalcom')\n  .factory('spinalModelDictionary', [\"$q\", \"ngSpinalCore\", \"config\", \"authService\", \"$routeParams\", \"$location\",\n    function ($q, ngSpinalCore, config, authService, $routeParams, $location) {\n      let factory = {};\n      factory.model = 0;\n      factory.init = () => {\n        var deferred = $q.defer();\n        if (factory.model == 0) {\n          authService.wait_connect().then(() => {\n            let user = authService.get_user();\n            let path = $routeParams.filepath;\n            console.log(path)\n            if (path) {\n              path = atob(path);\n              ngSpinalCore.load(path).then((m) => {\n                factory.model = m;\n                console.log(m);\n                deferred.resolve(m);\n\n              }, () => {\n                let msg = \"not able to load : \" + path;\n                console.error(msg);\n                $location.replace('/drive/');\n                deferred.reject(msg);\n              });\n            }\n          }, () => {\n            let msg = \"not able to load : \" + path;\n            console.error(msg);\n            $location.replace('/drive/');\n            deferred.reject(msg);\n          });\n        } else\n          deferred.resolve(factory.model);\n        return deferred.promise;\n      };\n      return factory;\n    }\n  ]);",
    "// Copyright 2015 SpinalCom  www.spinalcom.com\n\n// This file is part of SpinalCore.\n\n// SpinalCore is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Soda is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with Soda. If not, see <http://www.gnu.org/licenses/>.\nvar exports = module.exports = {};\n\nvar ForgeFileDerivativesItem = class ForgeFileDerivativesItem extends Model {\n  constructor(params) {\n    super();\n    if (!params) {\n      params = {};\n    }\n    if ((params != null ? params.name : void 0) == null) {\n      params.name = \"unnamed\";\n    }\n    if ((params != null ? params.path : void 0) == null) {\n      params.path = \".\";\n    }\n    this.add_attr({\n      name: params.name,\n      path: params.path\n    });\n    this._name = this.name;\n  }\n\n  add_child(child) {\n    this._children.push(child);\n  }\n\n  accept_child(ch) {\n    return false;\n  }\n};\n\nexports.ForgeFileDerivativesItem = ForgeFileDerivativesItem;\n\nvar ForgeFileItem = class ForgeFileItem extends Model {\n  constructor(name = \"Forge File\") {\n    super();\n    let tmp = {\n      _name: name,\n      _viewable: false,\n      _children: [],\n      name: name,\n      filepath: new Path(),\n      state: new Choice(0, [\"Initial\",\n        \"Uploading\", \"Uploading completed\",\n        \"Uploading to forge\", \"Upload to forge completed\",\n        \"Translating\", \"Translating completed\",\n        \"Export completed\", \"Failed\"\n      ]),\n      urn: \"\",\n      ask_token: false,\n      oauth: \"\",\n      bucket_key: \"\"\n    };\n    this.add_attr(tmp);\n  }\n  add_child(child) {\n    this._children.push(child);\n  }\n  accept_child(ch) {\n    return (ch instanceof ForgeFileDerivativesItem);\n  }\n};\n\nexports.ForgeFileItem = ForgeFileItem;\n\n\nvar ThemeModel = class ThemeModel extends Model {\n  constructor(){\n    super()\n    this.add_attr({\n      name : \"\",\n      owner : \"\",\n      username : \"\",\n      creation : Date.now(),\n      listModel : []\n    })\n  }\n\n  get_obj() {\n    let obj = {\n      name : this.name.get(),\n      owner : this.owner.get(),\n      username : this.username.get(),\n      creation : this.creation.get(),\n      listModel : [],\n      _server_id : this._server_id\n    } \n\n    for (var i = 0; i < this.listModel.length; i++) {\n      obj.listModel.push(this.listModel[i].get_obj());\n    }\n\n    return obj;\n  }\n\n}\n\nexports.ThemeModel = ThemeModel;\n\n\nvar NoteModel = class NoteModel extends Model {\n  constructor(name = \"NoteModel\") {\n    super();\n\n    this.add_attr({\n      title: '',\n      color: '',\n      owner: '',\n      username : '',\n      date: Date.now(),\n      allObject: [],\n      notes : [],\n      display : false,\n      files : new Directory()\n    });\n  }\n\n  get_obj() {\n    let obj = {\n      title: this.title.get(),\n      color: this.color.get(),\n      owner: this.owner.get(),\n      username : this.username.get(),\n      date: this.date.get(),\n      allObject: [],\n      notes : [],\n      display : this.display.get(),\n      files : this.files.get(),\n      _server_id : this._server_id\n    }\n\n    for (var i = 0; i < this.allObject.length; i++) {\n      obj.allObject.push(this.allObject[i])\n    }\n\n    for (var i = 0; i < this.notes.length; i++) {\n      obj.notes.push(this.notes[i].get_obj())\n    }\n    return obj;\n  }\n\n\n\n}\nexports.NoteModel = NoteModel;\n\n\nvar MessageModel = class MessageModel extends Model {\n  constructor() {\n    super();\n     this.add_attr({\n      username : '',\n      owner : '',\n      message : '',\n      date : Date.now()\n    });\n  }\n\n  get_obj() {\n    let obj = {\n      username : this.username.get(),\n      owner : this.owner.get(),\n      message : this.message.get(),\n      date : this.date.get(),\n      _server_id : this._server_id\n    }\n\n    return obj;\n  }\n}\n\nexports.MessageModel = MessageModel;\n\n\nvar FileModel = class FileModel extends Model {\n  constructor(file) {\n    super();\n    this.add_attr({\n      username : '',\n      owner : '',\n      name : '',\n      date : '',\n      path : new Path()\n    })\n  }\n\n  get_obj() {\n    let obj = {\n      username : this.username.get(),\n      owner : this.owner.get(),\n      name : this.name.get(),\n      date : this.date.get(),\n      _server_id : this._server_id\n    }\n\n    return obj;\n\n  }\n\n}\nexports.FileModel = FileModel;\n"
  ]
}
{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/app.config.js",
    "app/app.js",
    "app/app.route.js",
    "app/controllers/forgeViewerCtrl.js",
    "app/controllers/loginCtrl.js",
    "app/controllers/mainCtrl.js",
    "app/controllers/navbarCtrl.js",
    "app/directives/navbar.js",
    "app/run/filesPanel.js",
    "app/run/messagePanel.js",
    "app/run/plugin-annotation.js",
    "app/services/authService.js",
    "app/services/goldenLayoutService.js",
    "app/services/spinalCore.js",
    "app/services/spinalModelDictionary.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "angular.module('settings', [])\n  .constant('config', {\n    main_path: '/',\n    spinalhub_url: '127.0.0.1',\n    spinalhub_port: '8888',\n    spinalhub_user: '168',\n  });",
    "angular.module('app.route', ['ngRoute']);\nangular.module('app.services', []);\nangular.module('app.directives', []);\nangular.module('app.controllers', []);\nangular.module('app.spinalcom', ['settings', 'ngMaterial']);\nangular.module('app.spinalforge.plugin', []);\n\nangular.module('SpinalApp', ['ngAnimate', 'ngMaterial', 'app.directives', 'app.route',\n    'app.services', 'app.controllers', 'ngMdIcons', 'settings', 'app.spinalcom', 'app.spinalforge.plugin', \"colorpicker.module\"\n  ])\n  .run(['$rootScope', '$location', 'authService', function ($rootScope, $location, authService) {\n    let user = authService.get_user();\n    $rootScope.$on('$routeChangeStart', function (event, next, current) {\n      if (next.$$route.authenticate) {\n        if (!authService.is_Connected()) {\n          authService.login(user.username, user.password)\n            .then(function () {},\n              function () {\n                $location.path('/login');\n              });\n        }\n      }\n    });\n  }])\n\n\n  .config([\"$mdThemingProvider\", function ($mdThemingProvider) {\n    $mdThemingProvider.theme('altTheme')\n      .primaryPalette('grey', {\n        'default': '200'\n      })\n      .accentPalette('grey', {\n        'default': '700'\n      })\n      .dark();\n    $mdThemingProvider.theme('default')\n      .dark();\n\n    $mdThemingProvider.setDefaultTheme('altTheme');\n    $mdThemingProvider.alwaysWatchTheme(true);\n  }]).run([\"$templateCache\", \"$http\", function ($templateCache, $http) {\n    let load_template = (uri, name) => {\n      $http.get(uri).then((response) => {\n        $templateCache.put(name, response.data);\n      }, (errorResponse) => {\n        console.log('Cannot load the file ' + uri);\n      });\n    };\n    let toload = [{\n      uri: 'app/templates/forgeviewer.html',\n      name: 'forgeviewer.html'\n    }];\n    for (var i = 0; i < toload.length; i++) {\n      load_template(toload[i].uri, toload[i].name);\n    }\n\n    // $templateCache.put('templateId.html', 'This is the content of the template');\n  }]);",
    "angular.module('app.route')\n  .config([\"$routeProvider\", \"$locationProvider\",\n    function ($routeProvider, $locationProvider) {\n      $routeProvider\n\n        .when(\"/viewer/:filepath\", {\n          templateUrl: \"app/templates/main.html\",\n          authenticate: true,\n          controller: 'mainCtrl'\n        })\n        .when(\"/login\", {\n          templateUrl: \"app/templates/login.html\",\n          authenticate: false,\n          controller: 'loginCtrl'\n        })\n        .when('/404', {\n          authenticate: false,\n          controller: ['$location', function ($location) {\n            $location.replace('/drive/');\n          }]\n        }).otherwise({\n          redirectTo: '/404'\n        });\n\n      // .otherwise({\n      //   redirectTo: '/viewer'\n      // });\n    }\n  ]);",
    "angular.module('app.spinalforge.plugin')\n  .controller('forgeViewerCtrl', [\"$scope\", \"$rootScope\", \"$mdDialog\", \"authService\", \"$compile\", \"$injector\", \"layout_uid\", \"spinalModelDictionary\",\n    function ($scope, $rootScope, $mdDialog, authService, $compile, $injector, layout_uid, spinalModelDictionary) {\n      $scope.injector = $injector;\n      $scope.uid = layout_uid.get();\n      console.log(\"forgeviewerCtrl start\")\n\n      $rootScope.allNotes = []\n      // load etc..\n      $rootScope.allNotes = [\n        {\n          title: new Str(\"test1\"),\n        },\n        {\n          title: new Str(\"test1\"),\n        },\n        {\n          title: new Str(\"test1\"),\n        },\n        {\n          title: new Str(\"test1\"),\n        },\n            ]\n\n\n      spinalModelDictionary.init().then(function (ForgeFile) {\n        var viewerApp, viewables, indexViewable;\n        console.log(\"forgeviewerCtrl start 2\")\n\n        var config3d = {\n          extensions: ['PannelAnnotation', \"Autodesk.ADN.Viewing.Extension.Color\"]\n        };\n        var options = {\n          env: 'AutodeskProduction',\n          accessToken: ''\n        };\n\n\n        var documentId = 'urn:' + ForgeFile.urn.get();\n        get_oAuthToken(ForgeFile, documentId, init_autodesk);\n\n        function get_oAuthToken(forgeFile, documentId, callback) {\n          forgeFile.oauth.set(\"\");\n          forgeFile.ask_token.set(true);\n          var ask_for_token = true;\n          var oauth_onchange = function () {\n            if (ask_for_token && forgeFile.oauth.get() != \"\") {\n              ask_for_token = false;\n              forgeFile.oauth.unbind(oauth_onchange);\n              options.accessToken = forgeFile.oauth.get();\n              callback(documentId);\n            }\n          };\n          forgeFile.oauth.bind(oauth_onchange);\n        }\n\n        function init_autodesk(documentId) {\n          Autodesk.Viewing.Initializer(options, function onInitialized() {\n            viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv' + $scope.uid);\n            viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Private.GuiViewer3D, config3d);\n            viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n          });\n        }\n\n\n        function onDocumentLoadSuccess(doc) {\n          viewables = viewerApp.bubble.search({\n            'type': 'geometry',\n            'role': '3d'\n          });\n          if (viewables.length === 0) {\n            console.error('Document contains no viewables.');\n            return;\n          }\n          viewerApp.selectItem(viewables[viewables.length - 1].data, onItemLoadSuccess, onItemLoadFail);\n        }\n\n\n        function onDocumentLoadFailure(viewerErrorCode) {\n          console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\n        }\n\n\n        function onItemLoadSuccess(viewer, item) {\n          viewer.scope = $scope;\n          console.log('Viewers are equal: ' + (viewer === viewerApp.getCurrentViewer()));\n        }\n\n\n        function onItemLoadFail(errorCode) {\n          console.error('onItemLoadFail() - errorCode:' + errorCode);\n        }\n\n      });\n\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('loginCtrl', [\"$scope\", \"authService\", \"$mdToast\", \"$location\",\n    function ($scope, authService, $mdToast, $location) {\n      let toast = $mdToast.simple()\n        .hideDelay(3000);\n      let user = authService.get_user();\n      authService.logout();\n      $scope.conf = {\n        email: \"\",\n        password: \"\"\n      };\n      $scope.ConnectBtn = () => {\n        authService.login($scope.conf.email, $scope.conf.password).then(\n          () => {\n            $location.path('/home');\n          },\n          (err) => {\n            toast.textContent(err);\n            $mdToast.show(toast);\n          }\n        );\n      };\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('mainCtrl', [\"$scope\", \"$routeParams\", \"goldenLayoutService\", \"spinalModelDictionary\",\n    function ($scope, $routeParams, goldenLayoutService, spinalModelDictionary) {\n      goldenLayoutService.init();\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('navbarCtrl', [\"$scope\", \"authService\", \"$location\", \"$routeParams\",\n    function ($scope, authService, $location, $routeParams) {\n      $scope.username = \"\";\n      $scope.connected = false;\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n        $scope.connected = true;\n        $scope.viewer = $routeParams.filepath;\n        if ($scope.viewer) {\n          $scope.viewer = atob($scope.viewer);\n        } else {\n          $scope.viewer = \"viewer\";\n        }\n        console.log($routeParams.filepath);\n\n      });\n      $scope.logout = () => {\n        $location.path('/login');\n      };\n      // get in SpinalDrive_Env\n      $scope.layouts = [\n\n        {\n          id: \"drag-viewer\",\n          name: \"viewer\",\n          cfg: {\n            isClosable: true,\n            title: \"viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }\n        },\n\n\n      ];\n\n\n\n\n\n    }\n  ]);",
    "angular.module('app.directives')\n  .directive(\"navbar\", [\n    function () {\n      return {\n        restrict: 'E',\n        templateUrl: 'app/templates/navbar.html',\n        controller: 'navbarCtrl',\n      };\n    }\n  ])\n  .directive(\"menuGlayout\", ['goldenLayoutService', '$timeout',\n    function (goldenLayoutService, $timeout) {\n      return {\n        restrict: 'E',\n        scope: {\n          layoutInfo: '=info'\n        },\n        replace: true,\n        template: '<li ng-repeat=\\\"layout in layoutInfo\\\"  id=\\\"{{layout.id}}\\\"><a >{{layout.name}}</a></li>',\n        link: (scope, element, attrs) => {\n          goldenLayoutService.wait_ready().then(() => {\n            let create_callback = (goldenLayoutService, layout) => {\n              return () => {\n                goldenLayoutService.createChild(layout.cfg);\n              };\n            };\n            for (var i = 0; i < scope.layoutInfo.length; i++) {\n              let layout = scope.layoutInfo[i];\n              goldenLayoutService.createDragSource($(\"#\" + layout.id)[0], layout.cfg);\n              $(\"#\" + layout.id).click(create_callback(goldenLayoutService, layout));\n            }\n          });\n        }\n      };\n    }\n  ])\n  .directive('ngRightClick', [\"$parse\", function ($parse) {\n    return function (scope, element, attrs) {\n      var fn = $parse(attrs.ngRightClick);\n      element.bind('contextmenu', function (event) {\n        scope.$apply(function () {\n          event.preventDefault();\n          fn(scope, {\n            $event: event\n          });\n        });\n      });\n    };\n  }]);",
    "\nangular.module('app.spinalforge.plugin').run([\"$mdDialog\", \"$mdToast\",\"$rootScope\",\"$compile\",\nfunction ($mdDialog,$mdToast, $rootScope,$compile) {\n    window.FilesPanel = class FilesPanel {\n        constructor(viewer,notes,user){\n            this.viewer = viewer;\n            this.filePanel = null;\n            this.filePanelContent = null;\n            this.model = notes;\n            this.user = user;\n            this._file_selected = null;\n\n            $rootScope.execute_func = (name,id) => {\n                switch (name) {\n                    case \"delete_file\":\n                        this.RemoveFile(id);\n                        break;\n                \n                    case \"download_file\":\n                    this.DownloadFile(id)\n                        break;\n                }\n            }\n        }\n\n        DownloadFile(id) {\n            var selected;\n            for(let i = 0; i < this._file_selected.files.length; i++) {\n                selected = this._file_selected.files[i];\n                if(selected._info.id == id) {\n                selected.load( (model,error) => {\n                    if(model instanceof Path) {\n                    // window.open(\"/sceen/_?u=\" + model._server_id, \"Download\");\n                    var element = document.createElement('a');\n                    element.setAttribute('href', \"/sceen/_?u=\" + model._server_id);\n                    element.setAttribute('download', selected.name);\n\n                    element.style.display = 'none';\n                    document.body.appendChild(element);\n\n                    element.click();\n\n                    document.body.removeChild(element);\n                    }\n                });\n                break;\n                }\n            }\n        }\n\n\n        RemoveFile(id) {\n            var dialog = $mdDialog.confirm()\n            .ok(\"Delete !\")\n            .title('Do you want to remove it?')\n            .cancel('Cancel')\n            .clickOutsideToClose(true);\n        \n            $mdDialog.show(dialog)\n            .then((result) => {\n                for (let i = 0; i < this._file_selected.files.length; i++) {\n                    if(this._file_selected.files[i]._info.id == id) {\n                        this._file_selected.files.splice(i,1);\n                        break;\n                    }\n                }\n            }, function(){});\n        }\n\n\n        handle_files(files) {\n            var file,filePath,mod_file;\n\n            if(files.length > 0) {\n                for(let i = 0; i < files.length; i++) {\n                    filePath = new Path(files[i]);\n\n                    this._file_selected.files.force_add_file(files[i].name,filePath,{id : newGUID()})\n                }\n            }\n        }\n\n        DisplayFilePanel(themeId, annotationId) {\n            var notes = this.model;\n\n            if(this.filePanel == null) {\n                this.filePanel = new PanelClass(this.viewer,annotationId);\n                this.filePanel.initializeMoveHandlers(this.filePanel.container);\n                this.filePanel.container.appendChild(this.filePanel.createCloseButton());\n                this.filePanel.container.style.right = \"0px\";\n                this.filePanel.container.style.width = \"400px\";\n                this.filePanel.container.style.height = \"600px\";\n                this.filePanel.container.padding = \"0px\";\n                // }\n\n                // if(this.filePanelContent == null) {\n                this.filePanelContent = document.createElement('div');\n                this.filePanelContent.className = \"file_panel_content\";\n\n                var dragDrop = document.createElement('div');\n                dragDrop.className = \"dragDrop\";\n                \n                var input = document.createElement('input');\n                input.type = 'file';\n                input.id = \"modal-new-dropzone-input\";\n                input.setAttribute(\"multiple\",\"true\");\n                input.className = \"modal-new-dropzone-input\";\n\n                input.onchange = () => {\n                    return this.handle_files(input.files);\n                }\n\n                var file_container = document.createElement('label');\n                file_container.innerHTML = `\n                                    <span class=\"modal-new-span-upload\">\n                                        click to Choose files to upload or Drop them here\n                                    </span>\n                                    <ul id=\"modal-new-list-upload\"></ul>`;\n\n                file_container.className = \"text-center\"\n\n                file_container.ondrop = (evt) => {\n                    evt.stopPropagation();\n                    evt.preventDefault();\n\n                    this.handle_files(evt.dataTransfer.files);\n                }\n\n                file_container.ondragover = (evt) => {\n                    evt.preventDefault();\n                }\n\n                file_container.htmlFor = \"modal-new-dropzone-input\"\n\n\n                dragDrop.appendChild(input);\n                dragDrop.appendChild(file_container);\n                \n                \n                this.filePanelContent.appendChild(dragDrop);\n\n                var files_div = document.createElement('div');\n                files_div.className = 'files_div';\n\n                this.filePanelContent.appendChild(files_div);\n                this.filePanel.container.appendChild(this.filePanelContent);\n            \n            }\n            \n\n            \n            this.filePanel.setVisible(true);\n            \n\n            for (let index = 0; index < notes.length; index++) {\n                if(notes[index].id == themeId){\n                    for (let i = 0; i < notes[index].listModel.length; i++) {\n                        if(notes[index].listModel[i].id == annotationId){\n                            this._file_selected = notes[index].listModel[i];\n                            break;\n                        }      \n                    }\n                    \n                    break;\n                }   \n            }\n\n            this.filePanel.setTitle(this._file_selected.title.get());\n\n            notes.bind(() => {\n                this.files_display();\n            })\n\n        }\n\n\n        displayItem(_file,parent) {\n            var items = `<md-list-item>\n                        <p class=\"noteTitle\">${_file.name.get()}</p>\n\n                        <md-button class=\"i_btn\" aria-label=\"add_item\" id=${_file._info.id.get()} ng-click=\"execute_func('delete_file','${_file._info.id.get()}')\">\n                            <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                        </md-button>\n\n                        <md-button class=\"i_btn\" aria-label=\"add_item\" id=${_file._info.id.get()} ng-click=\"execute_func('download_file','${_file._info.id.get()}')\">\n                            <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n                        </md-button>\n                    </md-list-item>`; \n\n            var content = angular.element(items);\n\n            parent.append(content);\n            $compile(content)($rootScope);\n        }\n\n        files_display() {\n\n            var files = document.getElementsByClassName(\"files_div\")[0];\n            files.innerHTML = \"\";\n\n            var contener = angular.element(files);\n\n            var div = angular.element('<md-list>\\\n                </md-list>');\n\n\n            contener.append(div);\n            $compile(div)($rootScope);\n\n            var _file;\n\n            for (let i = 0; i < this._file_selected.files.length; i++) {\n                _file = this._file_selected.files[i];\n                this.displayItem(_file,div);\n            }\n\n        }\n\n    }\n\n}]);",
    "\n\nclass MessagePanel {\n    constructor(viewer,notes,user) {\n        this.detailPanel = null;\n        this.detailPanelContent = null;\n        this.model = notes;\n        this.viewer = viewer;\n        this._selected = null;\n        this.user = user;\n    }\n\n    DetailPanel(themeId,annotationId) {\n        var notes = this.model;\n\n        console.log(\"theme id : \", themeId);\n        console.log(\"annotation id : \", annotationId);\n\n        if(this.detailPanelContent == null){\n            this.detailPanelContent = document.createElement('div');\n            this.detailPanelContent.className = \"content\";\n        }\n\n        if(this.detailPanel == null) {\n            this.detailPanel = new PanelClass(this.viewer,annotationId);\n            this.detailPanel.initializeMoveHandlers(this.detailPanel.container);\n            this.detailPanel.container.appendChild(this.detailPanel.createCloseButton());\n            this.detailPanel.container.style.right = \"0px\";\n            this.detailPanel.container.style.width = \"400px\";\n            this.detailPanel.container.style.height = \"600px\";\n            this.detailPanel.container.padding = \"0px\";\n\n        }\n\n        for (let index = 0; index < notes.length; index++) {\n            if(notes[index].id == themeId){\n                for (let i = 0; i < notes[index].listModel.length; i++) {\n                    if(notes[index].listModel[i].id == annotationId) {\n                        this._selected = notes[index].listModel[i];\n                        break;\n                    }\n                    \n                }\n                break;   \n            }   \n        }\n\n        var formDiv = document.createElement('div');\n        formDiv.className = \"form_div\";\n\n\n        var textareaDiv = document.createElement('div');\n        textareaDiv.className = \"textarea_div\";\n\n        var inputText = document.createElement('textarea');\n        inputText.className = \"form-control\";\n        inputText.setAttribute('rows','2')\n        inputText.id = this._selected.id.get();\n        inputText.placeholder = \"add texte\";\n\n        inputText.onclick = () => {\n            inputText.focus();\n        }\n\n        textareaDiv.appendChild(inputText);\n\n        var sendButtonDiv = document.createElement('div');\n        sendButtonDiv.className = \"send_button_div\"\n\n        var sendButton = document.createElement('button');\n        sendButton.className = \"btn btn-block\";\n        sendButton.textContent = \"Add\";\n        sendButton.id = this._selected.id.get();;\n\n        sendButton.onclick = () => {\n            var textAreaValue = document.querySelector(`textarea[id='${sendButton.id}']`).value;\n            document.querySelector(`textarea[id='${sendButton.id}']`).value = \"\";\n\n            if(textAreaValue != \"\" && textAreaValue.trim() != \"\") {\n                var message = new MessageModel();\n                message.id.set(newGUID());\n                message.owner.set(this.user.id);\n                message.username.set(this.user.username);\n                message.date.set(Date.now());\n                message.message.set(textAreaValue);\n\n                this._selected.notes.push(message);\n            }\n\n        }\n\n        sendButtonDiv.appendChild(sendButton);\n        \n        formDiv.appendChild(textareaDiv);\n        formDiv.appendChild(sendButtonDiv);\n        \n        this.detailPanel.setVisible(true);\n        \n        notes.bind( () => {   \n            this.DisplayMessage(formDiv)\n        });\n\n\n    }\n\n    DisplayMessage(formDiv) {\n        var _self = this;\n        var messageContainer = document.createElement('div');\n        messageContainer.className = \"messageContainer\"; \n\n        for (let i = 0; i < this._selected.notes.length; i++) {\n            //message div\n            var message_div = document.createElement('div');\n            message_div.className = \"message_div\";\n\n            //header message\n            var _message = document.createElement('div');\n            _message.className = \"_message\";\n            \n            //name\n            var message_owner = document.createElement('div');\n            message_owner.className = \"message_owner\";\n            message_owner.innerText = this._selected.notes[i].username.get();\n\n\n            //date\n            var message_date = document.createElement('div');\n            message_date.className = \"message_date\";\n            var date = new Date(parseInt(this._selected.notes[i].date));\n            message_date.innerText =   date.getDate() + \"/\" + date.getMonth() + 1 + \"/\" + date.getFullYear();\n\n            \n\n            //message content\n            var message_content = document.createElement('div');\n            message_content.className = \"message_content\";\n\n            var message_texte = document.createElement('div');\n            message_texte.className = \"message_texte\";\n            message_texte.innerHTML = this._selected.notes[i].message;\n\n            if(this._selected.notes[i].owner == this.user.id) {\n                var closeDiv = document.createElement('div');\n                closeDiv.className = \"close_div\";\n\n                var span = document.createElement('span');\n                span.innerHTML = \"X\";\n                span.className = \"close\";\n                span.id = this._selected.notes[i].id\n\n                span.onclick = function(){\n                    // var dialog = $mdDialog.confirm()\n                    //     .ok(\"Delete !\")\n                    //     .title('Do you want to remove it?')\n                    //     .cancel('Cancel')\n                    //     .clickOutsideToClose(true);\n                \n                    //     $mdDialog.show(dialog)\n                    //     .then((result) => {\n                    _self.deteteMessage(this.id,formDiv);\n                    // }, function(){});\n                \n                }\n\n                closeDiv.appendChild(span);\n                message_content.appendChild(closeDiv);\n            }\n\n            message_content.appendChild(message_texte);\n\n            _message.appendChild(message_owner);\n            _message.appendChild(message_content);\n            \n\n\n            message_div.appendChild(message_date);\n            message_div.appendChild(_message);\n            \n\n            messageContainer.appendChild(message_div);\n\n        }\n\n\n        this.detailPanelContent.innerHTML = \"\";\n\n        this.detailPanelContent.appendChild(messageContainer);\n        this.detailPanelContent.appendChild(formDiv);\n\n        this.detailPanel.setTitle(this._selected.title.get());\n        this.detailPanel.container.appendChild(this.detailPanelContent);\n\n        var d = document.getElementsByClassName(\"messageContainer\")[0];\n        d.scrollTop = d.scrollHeight;\n\n    }\n\n    deteteMessage(id, formDiv) {\n    \n        for (let i = 0; i < this._selected.notes.length; i++) {\n            \n            if(this._selected.notes[i].id == id) {\n            this._selected.notes.splice(i,1);\n            break;\n            }\n            \n        }\n\n    }\n}",
    "\n\nangular.module('app.spinalforge.plugin').run([\"spinalModelDictionary\", \"$mdDialog\", \"$mdToast\", \"authService\",\"$rootScope\",\"$compile\",\n  function (spinalModelDictionary, $mdDialog,$mdToast, authService,$rootScope,$compile) {\n\n    class PannelAnnotation {\n      constructor(viewer, options) {\n        Autodesk.Viewing.Extension.call(this, viewer, options);\n\n        this.viewer = viewer;\n        this.panel = null;\n        this.user = authService.get_user();\n        this.messagePanel;\n        this.filePanel;\n\n        $rootScope.exec_function = (name,param1 = null,param2 = null,param3 = null) => {\n          switch (name) {\n            case \"createTheme\":\n              this.createTheme();\n              break;\n\n            case \"addNote\":\n              this.createNote(param1);\n              break;\n            \n            case \"seeAnnotation\":\n              this.SeeAnnotation(param1);\n              break;\n            \n              case \"addItem\":\n              this.AddItems(param1,param2)\n              break;\n  \n            case \"changeColor\":\n              this.changeColorInHub(param1,param2,param3);\n              break;\n  \n            case \"view\":\n              this.viewOrHide(param1,param2);\n              break;\n  \n            case \"rename\":\n              this.renameNote(param1,param2);\n              break;\n  \n            case \"delete\":\n              this.deleteNoteItem(param1,param2,param3);\n              break;\n\n            case \"info\":\n              this.viewMessagePanel(param1,param2);\n              break;\n            \n            case \"file\":\n              this.viewFilePanel(param1,param2);\n              break;\n            \n            case \"seeAll\" :\n              this.viewOrHideAllItem(param1);\n              break;\n  \n            \n            // case \"settingAnnotation\":\n            //   this.settingAnnotation(params);\n            //   break;\n            // case \"save\" :\n            //   this.saveModification(params,param2);\n            //   break;\n          }\n        }\n\n      }\n\n      load() {\n        if (this.viewer.toolbar) {\n          this.createUI();\n        } else {\n          this.onToolbarCreatedBinded = this.onToolbarCreated.bind(this);\n          this.viewer.addEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n        }\n        return true;\n      }\n\n      onToolbarCreated() {\n        this.viewer.removeEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n        this.onToolbarCreatedBinded = null;\n        this.createUI();\n      }\n\n      unload() {\n        this.viewer.toolbar.removeControl(this.subToolbar);\n        return true;\n      }\n\n      createUI() {\n        var title = 'Annotation';\n        this.panel = new PanelClass(this.viewer, title);\n\n        this.initialize();\n\n        var button1 = new Autodesk.Viewing.UI.Button('Annotation');\n\n        button1.onClick = (e) => {\n          if (!this.panel.isVisible()) {\n            this.panel.setVisible(true);\n          } else {\n            this.panel.setVisible(false);\n          }\n        };\n\n        button1.addClass('fa');\n        button1.addClass('fa-pencil');\n        button1.addClass('fa-2x');\n        button1.setToolTip('Annotation');\n\n        this.subToolbar = new Autodesk.Viewing.UI.ControlGroup('my-Annotation');\n        this.subToolbar.addControl(button1);\n        this.viewer.toolbar.addControl(this.subToolbar);\n      }\n\n      initialize() {\n\n\n        this.panel.initializeMoveHandlers(this.panel.container);\n        // this.panel.container.appendChild(this.panel.createScrollContainer());\n        var _container = angular.element(this.panel.container);\n\n        spinalModelDictionary.init().then((m) => {\n          if (m) {\n            if (m.groupAnnotationPlugin) {\n              m.groupAnnotationPlugin.load((mod) => {\n                this.model = mod;\n                this.func_success(this.model,_container);\n              });\n            } else {\n              this.model = new Lst();\n              m.add_attr({\n                groupAnnotationPlugin : new Ptr(this.model)\n              });\n              this.func_success(this.model,_container);\n            }\n\n          }\n\n        });\n      }\n\n      func_success(data,parent) {\n        this.messagePanel = new MessagePanel(this.viewer,this.model,this.user);\n        this.filePanel = new FilesPanel(this.viewer,this.model,this.user);\n        var container = angular.element('<div class=\"_container\"></div>');\n        var addGroup = angular.element(`<md-button class=\"md-raised md-primary block\" ng-click=\"exec_function('createTheme')\">Create a group</md-button>`);\n\n        var items = document.createElement('div');\n        items.className = \"themes\";\n\n        \n\n        container.append(addGroup)\n        \n        data.bind(() => {\n          items.innerHTML = \"\";\n          this.displayTheme(items,container,data);\n        })\n\n        $compile(container)($rootScope);\n        parent.append(container);\n\n        var colors = document.getElementsByClassName(\"input_color\");\n        console.log(\"colors\",colors)\n        var _self = this;\n\n        for (let i = 0; i < colors.length; i++) {\n          colors[i].onchange = function() {\n            _self.changeColorInHub(this.theme, this.name, this.value);\n          }\n          \n        }\n\n      }\n\n      displayAnnotation(id) {\n\n        var notes = this.model;\n        var selected;\n\n\n        var content = `<md-list class='md-list-item-text' id=\"a_${id}\">`;\n        \n        for (let i = 0; i < notes.length; i++) {\n          const element = notes[i];\n          if(element.id == id) {\n            selected = element;\n            break;\n          }\n        }\n\n        if(selected != null) {\n          for (let j = 0; j < selected.listModel.length; j++) {\n            const note = selected.listModel[j];\n\n            content += `<md-list-item ng-click=\"\" class=\"noright\">\n                <p class=\"noteTitle\">${note.title.get()}</p>\n\n\n                <md-button class=\"i_btn\" aria-label=\"add_item\" id=${note.id.get()} ng-click=\"exec_function('addItem','${selected.id.get()}','${note.id.get()}')\">\n                  <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <input class=\"i_btn input_color\" value=\"${note.color.get()}\" id=\"i_color\" type='color' theme='${selected.id.get()}' name='${note.id.get()}'/>\n\n                <md-button class=\"i_btn show${note.id.get()}\" id='e_${note.id.get()}' aria-label=\"view\" ng-click=\"exec_function('view','${selected.id.get()}','${note.id.get()}')\" show=\"false\">\n                  <i class=\"fa fa-eye\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"rename\" ng-click=\"exec_function('rename','${selected.id.get()}','${note.id.get()}')\">\n                  <i class=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"delete\" ng-click=\"exec_function('delete','${selected.id.get()}','${note.id.get()}')\">\n                  <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"info\" ng-click=\"exec_function('info','${selected.id.get()}','${note.id.get()}')\">\n                  <i class=\"fa fa-comment\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"info\" ng-click=\"exec_function('file','${selected.id.get()}','${note.id.get()}')\">\n                  <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\n                </md-button> \n\n            </md-list-item>`;\n            \n          }\n        }\n        \n        content += `</md-list>`;\n\n        return content;\n\n      }\n\n      displayTheme(parent,container,notes) {\n        \n        var content = angular.element(`<md-list></md-list>`);\n        var div,element;\n\n        if(notes.length > 0) {\n          for (let i = 0; i < notes.length; i++) {\n            element = notes[i];\n            div = angular.element(`\n              <md-list-item>   \n                <p id='p_${element.id.get()}' show=\"false\" ng-click=\"exec_function('seeAnnotation','${element.id.get()}')\">\n                  <i class=\"fa fa-caret-right\"></i>\n                  &nbsp;\n                  ${element.name.get()}\n                </p>\n\n                <md-button class=\"i_btn\" aria-label=\"add_item\" id=${element.id.get()} ng-click=\"exec_function('addNote','${element.id.get()}')\">\n                  <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <md-button class=\"i_btn show${element.id.get()}\" id='th_${element.id.get()}' aria-label=\"view\" show=\"false\" ng-click=\"exec_function('seeAll','${element.id.get()}')\">\n                  <i class=\"fa fa-eye\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <md-button class=\"i_btn\" id=${element.id.get()} aria-label=\"rename\" ng-click=\"exec_function('rename','${element.id.get()}')\">\n                  <i class=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n                </md-button>\n\n                <md-button class=\"i_btn\" id=${element.id.get()} aria-label=\"delete\" ng-click=\"exec_function('delete','${element.id.get()}')\">\n                  <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                </md-button>\n\n              </md-list-item>\n\n              ${this.displayAnnotation(element.id.get())}\n            `);\n              \n            content.append(div);\n\n          }\n        } else {\n          content.append('<h1>No note created ! create one</h1>');\n        }\n        var _parent = angular.element(parent);\n        var c = angular.element(content);\n        _parent.append(c);\n        $compile(c)($rootScope);\n\n        container.append(_parent);\n\n        // var annotationSelected = angular.element('<div class=\"item_selected\"></div>')\n        // container.append(annotationSelected);\n\n      }\n\n      createTheme() {\n        var notes = this.model;\n        var theme = new ThemeModel();\n\n        theme.id.set(newGUID());\n        theme.creation.set(Date.now());\n        theme.owner.set(this.user.id);\n        theme.username.set(this.user.username);\n\n        var confirm = $mdDialog.prompt()\n          .title('Theme')\n          .placeholder('Please enter the theme')\n          .ariaLabel('New Theme')\n          .clickOutsideToClose(true)\n          .required(true)\n          .ok('create!')\n          .cancel('Cancel')\n        \n          $mdDialog.show(confirm).then((result) => {\n            theme.name.set(result);\n\n            notes.push(theme);\n\n            console.log(this.model)\n\n          },function(){})\n\n      }\n\n      createNote(id){\n        var notes = this.model;\n        var selected;\n\n        for (let i = 0; i < notes.length; i++) {\n          const element = notes[i];\n          if(element.id == id) {\n            selected = element;\n            break;\n          }\n          \n        }\n\n        var noteModel = new NoteModel();\n\n        noteModel.id.set(newGUID());\n        noteModel.owner.set(this.user.id);\n        noteModel.username.set(this.user.username);\n        noteModel.date.set(Date.now());\n        noteModel.color.set(\"#000000\");\n\n        var confirm = $mdDialog.prompt()\n          .title('Note')\n          .placeholder('Note name')\n          .ariaLabel('New Note')\n          .clickOutsideToClose(true)\n          .required(true)\n          .ok('create')\n          .cancel('Cancel')\n        \n        $mdDialog.show(confirm).then((result) => {\n          noteModel.title.set(result);\n\n          selected.listModel.push(noteModel);\n\n        },function(){})\n        \n\n      }\n\n      SeeAnnotation(id) {\n        var p_div = document.getElementById(\"p_\" + id);\n        var annot_div = document.getElementById(\"a_\" + id);\n        var icon = p_div.getElementsByTagName('i')[0];\n\n\n        if(p_div.getAttribute(\"show\") == \"false\") {\n          annot_div.style.display = \"block\";\n          p_div.setAttribute('show','true');\n          icon.setAttribute('class','fa fa-caret-down')\n        } else {\n          annot_div.style.display = \"none\";\n          p_div.setAttribute('show','false');\n          icon.setAttribute('class','fa fa-caret-right')\n        }\n        \n      }\n\n      viewOrHideAllItem(themeId) {\n        var theme = document.getElementById(\"th_\" + themeId);\n\n        if(theme.getAttribute(\"show\") == \"false\") {\n          theme.innerHTML = '<i class=\"fa fa-eye-slash\"></i>'\n          theme.setAttribute('show','true');\n          this.changeAllItemsColor(themeId);\n          this.changeAllAnnotationIcon(themeId,\"false\");\n        } else {\n          theme.innerHTML = '<i class=\"fa fa-eye\"></i>'\n          theme.setAttribute('show','false');\n          this.restoreAllItemsColor(themeId);\n          this.changeAllAnnotationIcon(themeId,\"true\");\n        }\n\n      }\n\n      getAllAnnotationId(themeId) {\n        var objects = [];\n        var _selected;\n        var notes = this.model;\n\n        for(var i = 0; i < notes.length; i++) {\n          if(notes[i].id == themeId) {\n            _selected = notes[i];\n            for (var i = 0; i < _selected.listModel.length; i++) {\n              var ids = [];\n              var color;\n              for (var j = 0; j < _selected.listModel[i].allObject.length; j++) {\n                ids.push(_selected.listModel[i].allObject[j].dbId.get());\n              }\n              color = _selected.listModel[i].color.get();\n\n              objects.push({\n                ids: ids,\n                color: color,\n                id: _selected.listModel[i].id\n              });\n\n              \n            }\n            return objects;\n          }\n        }\n      \n      }\n\n      changeAllItemsColor(themeId) {\n        var objects = this.getAllAnnotationId(themeId);\n\n        this.viewer.colorAllMaterials(objects);\n\n      }\n\n      restoreAllItemsColor(themeId) {\n        var objects = this.getAllAnnotationId(themeId);\n\n        this.viewer.restoreAllMaterialColor(objects);\n      }\n\n      changeAllAnnotationIcon(themeId,show) {\n        var notes = this.model;\n\n        for (let i = 0; i < notes.length; i++) {\n          const note = notes[i];\n          if(note.id == themeId) {\n            for (let j = 0; j < note.listModel.length; j++) {\n              const annotation = note.listModel[j];\n              var doc = document.getElementById(\"e_\" + annotation.id.get());\n              \n              if(show == \"false\") {\n                doc.innerHTML = '<i class=\"fa fa-eye-slash\"></i>';\n                doc.setAttribute('show','true');\n              } else {\n                doc.innerHTML = '<i class=\"fa fa-eye\"></i>';\n                doc.setAttribute('show','false');\n              }\n              \n            }\n          }\n          \n        }\n\n      }\n\n      verifyIcon(themeId) {\n        var notes = this.model;\n\n        for (let i = 0; i < notes.length; i++) {\n          const note = notes[i];\n          if(note.id == themeId) {\n            for (let j = 0; j < note.listModel.length; j++) {\n              const annotation = note.listModel[j];\n\n              var doc = document.getElementById(\"e_\" + annotation.id);\n\n              if(doc.getAttribute(\"show\") == \"false\") {\n                return false;\n              }\n              \n            }\n            return true;\n          }\n          \n        }\n\n      }\n\n      // settingAnnotation(id) {\n      //   var notes = this.model;\n      //   var liste = id.split(\"/\");\n      //   var themeId = liste[0];\n      //   var annotationId = liste[1];\n      //   // var sel;\n      //   // var themeName;\n\n      //   $rootScope.themeName;\n      //   $rootScope.annotationSelected;\n      //   var name;\n\n\n      //   for (let i = 0; i < notes.length; i++) {\n      //     const element = notes[i];\n      //     if(element.id == themeId) {\n      //       $rootScope.themeName = element.name.get();\n      //       for (let j = 0; j < element.listModel.length; j++) {\n      //         const annotation = element.listModel[j];\n      //         if(annotation.id == annotationId) {\n      //           // sel = annotation;\n      //           $rootScope.annotationSelected = annotation;\n      //           break;\n      //         }\n              \n      //       }\n      //       break;\n      //     }\n          \n      //   }\n\n      //   name = $rootScope.annotationSelected.title;\n\n      //   var divSelect = document.getElementsByClassName(\"item_selected\")[0];\n      //   divSelect.innerHTML = \"\";\n\n      //   var container = angular.element(divSelect);\n\n      //   var div = angular.element(`\n      //     <h1>{{themeName | uppercase}} > ${name}</h1>\n      //     <br />\n      //     <div layout=\"column\" class=\"md-inline-form\">\n      //       <md-input-container class=\"md-block\">\n      //         <label>Name</label>\n      //         <input id=\"_input\" ng-model=\"annotationSelected.title\" placeholder=\"title\" ng-click=\"focus_input()\">\n      //       </md-input-container>\n\n      //       <md-input-container class=\"md-block\">\n      //         <label>Color</label>\n      //         <input ng-model=\"annotationSelected.color\" type=\"color\" placeholder=\"title\">\n      //       </md-input-container>\n\n      //       <md-button class=\"md-raised md-primary block\" ng-click=\"exec_function('save',annotationSelected, '${themeId}')\">Save</md-button>\n\n      //     </div>\n\n\n      //   `);\n\n      //   container.append(div);\n\n      //   $compile(container)($rootScope);\n        \n\n      // }\n\n      // saveModification(annotation,themeId) {\n      //   var notes = this.model;\n\n      //   for (let i = 0; i < notes.length; i++) {\n      //     const element = notes[i];\n      //     if(element.id == themeId) {\n      //       for (let j = 0; j < element.listModel.length; j++) {\n      //         const annotation = element.listModel[j];\n      //         if(annotation.id == annotation.id) {\n      //           notes[i].listModel[j].mod_attr(annotation);\n      //           break;\n      //         }\n              \n      //       }\n      //       break;\n      //     }\n          \n      //   }\n\n      // }\n\n\n\n\n      //---------------------------------------------------- Annotation functions ------------------------------\n\n      AddItems(themeId,annotationId) {\n        var noteSelected, indexTheme,indexNote;\n        var items = this.viewer.getSelection();\n        var notes = this.model;\n  \n  \n        if (items.length == 0) {\n          alert('No model selected !');\n          return;\n        }\n  \n        this.viewer.model.getBulkProperties(items, {\n          propFilter: ['name']\n        }, (models) => {\n  \n          for (var i = 0; i < notes.length; i++) {\n            if (notes[i].id == themeId) {\n              indexTheme = i;\n              for (let j = 0; j < notes[i].listModel.length; j++) {\n                const element = notes[i].listModel[j];\n                if(element.id == annotationId) {\n                  indexNote = j;\n                  noteSelected = notes[i].listModel[j].allObject;\n                  break;\n                }\n                \n              }\n              break;\n              \n            }\n          }\n  \n          for (var j = 0; j < models.length; j++) {\n            noteSelected.push(models[j]);\n          }\n\n          notes[indexTheme].listModel[indexNote].allObject = noteSelected;\n  \n          var toast = $mdToast.simple()\n          .content(\"Item added !\")\n          .action('OK')\n          .highlightAction(true)\n          .hideDelay(0)\n          .position('bottom right')\n          .parent(\"body\");\n  \n          $mdToast.show(toast);\n        }, function () {\n          console.log(\"error\");\n        });\n  \n  \n      }\n\n\n      changeColorInHub(themeId,annotationId,color) {\n      \n        console.log(\"themeId\", themeId);\n        console.log(\"annotationId\", annotationId);\n        console.log(\"color\", color);\n\n        var noteSelected, indexNote, indexTheme;\n        var notes = this.model;\n  \n        for (var i = 0; i < notes.length; i++) {\n          if (notes[i].id == themeId) {\n            for (let j = 0; j < notes[i].listModel.length; j++) {\n              const element = notes[i].listModel[j];\n\n              if(element.id == annotationId) {\n                notes[i].listModel[j].color.set(color);\n                break;\n              }\n              \n            }\n            break;\n          }\n        }\n      }\n\n\n      getItemsId(themeId,annotationId) {\n        var ids = [];\n        var selected;\n        var notes = this.model;\n\n        for (var i = 0; i < notes.length; i++) {\n          if (notes[i].id == themeId) {\n            for (let k = 0; k < notes[i].listModel.length; k++) {\n              const element = notes[i].listModel[k];\n\n              if(element.id == annotationId) {\n                selected = notes[i].listModel[k];\n                break;\n              }\n              \n            }\n            break;\n          }\n        }\n\n\n        for (var j = 0; j < selected.allObject.length; j++) {\n          ids.push(selected.allObject[j].dbId.get());\n        }\n        return {ids : ids, selected : selected};\n      }\n  \n\n      changeItemColor(themeId, annotationId) {\n        \n        var idsList = this.getItemsId(themeId,annotationId);\n\n        this.viewer.setColorMaterial(idsList.ids, idsList.selected.color, idsList.selected.id);\n\n        var doc = document.getElementById(\"th_\" + themeId)\n\n        if(this.verifyIcon(themeId)) {\n          doc.setAttribute('show','true');\n          doc.innerHTML = '<i class=\"fa fa-eye-slash\"></i>'\n        } else {\n          doc.setAttribute('show','false');\n          doc.innerHTML = '<i class=\"fa fa-eye\"></i>'\n        }\n\n      }\n\n      restoreColor(themeId,annotationId) {\n        var idsList = this.getItemsId(themeId, annotationId);\n        this.viewer.restoreColorMaterial(idsList.ids,idsList.selected.id);\n\n        var doc = document.getElementById(\"th_\" + themeId)\n\n        if(!this.verifyIcon(themeId)) {\n          doc.setAttribute('show','true');\n          doc.innerHTML = '<i class=\"fa fa-eye-slash\"></i>'\n        } else {\n          doc.setAttribute('show','false');\n          doc.innerHTML = '<i class=\"fa fa-eye\"></i>'\n        }\n\n      }\n\n      deleteNoteItem(themeId,annotationId,item) {\n\n        var notes = this.model;\n  \n        var dialog = $mdDialog.confirm()\n              .ok(\"Delete !\")\n              .title('Do you want to remove it?')\n              .cancel('Cancel')\n              .clickOutsideToClose(true);\n        \n              $mdDialog.show(dialog)\n              .then((result) => {\n                var themeIndex,annotationIndex;\n\n                for (let i = 0; i < notes.length; i++) {\n                  if(notes[i].id == themeId) {\n                    themeIndex = i;\n                    for(var j = 0; j < notes[i].listModel.length; j++){\n                      if(notes[i].listModel[j].id == annotationId) {\n                        annotationIndex = j;\n                        break;\n                      }  \n                    }\n                    break;\n                  }\n                    \n                }\n\n                if(item != null) {\n                  for (let index = 0; index < notes[themeIndex].listModel[annotationIndex].allObject.length; index++) {\n                    const element = notes[themeIndex].listModel[annotationIndex].allObject[index]\n                    if(element.dbId == item) {\n                      notes[themeIndex].listModel[annotationIndex].allObject.splice(index,1);\n                      break;\n                    } \n                  }\n                } else if(item == null && annotationId != null) {\n                  notes[themeIndex].listModel.splice(annotationIndex,1);\n                } else {\n                  notes.splice(themeIndex,1);\n                }\n  \n              }, function(){});\n  \n      }\n\n      renameNote(themeId,annotationId) {\n        var notes = this.model;\n  \n        var confirm = $mdDialog.prompt()\n              .title('Rename Note')\n              .placeholder('Please enter the title')\n              .ariaLabel('Rename')\n              .clickOutsideToClose(true)\n              .required(true)\n              .ok('Rename')\n              .cancel('Cancel');\n\n              $mdDialog.show(confirm).then((result) => {\n                var themeIndex;\n\n                for (let i = 0; i < notes.length; i++) {\n                  if(notes[i].id == themeId) {\n                      themeIndex = i;\n                      break;\n                  } \n                }\n\n                if(annotationId != null) {\n                  for (let j = 0; j < notes[themeIndex].listModel.length; j++) {\n                    const element = notes[themeIndex].listModel[j];\n                    if(element.id == annotationId) {\n                      notes[themeIndex].listModel[j].title.set(result);\n                      break;\n                    }   \n                  }\n                } else {\n                  notes[themeIndex].name.set(result);\n                }\n\n              }, function () {});\n      }\n\n      viewOrHide(themeId, annotationId) {\n\n        var element = document.getElementsByClassName(\"show\" + annotationId)[0];\n        var show = element.getAttribute(\"show\");\n  \n        if(show == \"false\") {\n          element.setAttribute(\"show\",\"true\");\n          this.changeItemColor(themeId, annotationId);\n          element.innerHTML = '<i class=\"fa fa-eye-slash\" aria-hidden=\"true\"></i>';\n        } else {\n          this.restoreColor(themeId, annotationId);\n          element.setAttribute(\"show\",\"false\");\n          element.innerHTML = '<i class=\"fa fa-eye\" aria-hidden=\"true\"></i>';\n          \n        }\n  \n      }\n\n      //------------------------------------------------------ Pannel Message -------------------------------------\n      viewMessagePanel(themeId,annotationId) {\n        this.messagePanel.DetailPanel(themeId,annotationId);\n      }\n\n      //----------------------------------------------------- -- Panel File ---------------------------------------\n      viewFilePanel(themeId,annotationId) {\n        this.filePanel.DisplayFilePanel(themeId,annotationId);\n      }\n\n\n\n    } // end class\n    \n  Autodesk.Viewing.theExtensionManager.registerExtension('PannelAnnotation', PannelAnnotation);\n  } // end run\n]);",
    "angular.module('app.spinalcom')\n  .factory('authService', [\"$q\", \"ngSpinalCore\", \"config\", \"$http\",\n    function ($q, ngSpinalCore, config, $http) {\n      let factory = {};\n      let user = {\n        username: \"\",\n        password: \"\",\n        id : \"\"\n      };\n      let is_Connected = false;\n      factory.save_user = (username, password, id) => {\n        user.username = username;\n        user.password = password;\n        user.id = id;\n        window.localStorage.setItem(\"spinalhome_cfg\", btoa(JSON.stringify(user)));\n      };\n      factory.get_user = () => {\n        let _user = window.localStorage.getItem(\"spinalhome_cfg\");\n        if (_user) {\n          user = JSON.parse(atob(_user));\n        }\n        return user;\n      };\n\n      factory.logout = (username, password) => {\n        if (user.username != \"\") {\n          factory.save_user(\"\", \"\",\"\");\n          location.reload();\n        }\n      };\n\n      factory.login = (username, password) => {\n        let deferred = $q.defer();\n        let url = \"/get_user_id\";\n        $http.get(url + \"?u=\" + username + \"&p=\" + password)\n          .then(function (data) {\n            var u = parseInt(data.data);\n            var i = 0;\n            if (u == -1) {\n              let msg = (\"Login Error: username / password pair not found.\");\n              // $mdToast.show(loginError_toast)\n              deferred.reject(msg);\n              for (i = 0; i < wait_connectList.length; i++) {\n                wait_connectList[i].reject();\n              }\n              wait_connectList = [];\n              return;\n            }\n            ngSpinalCore.connect(\"http://\" + u + \":\" + password +\n              \"@\" + config.spinalhub_url + \":\" + config.spinalhub_port + \"/\");\n            factory.save_user(username, password,u);\n            is_Connected = true;\n            deferred.resolve();\n            for (i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].resolve();\n            }\n            wait_connectList = [];\n          }, function (data) {\n            let msg = ('Connection Error: Imposible to connect to the server.');\n            // $mdToast.show(connectionError_toast)\n            deferred.reject(msg);\n            for (var i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].reject();\n            }\n            wait_connectList = [];\n          });\n        return deferred.promise;\n      };\n\n      factory.is_Connected = () => {\n        return is_Connected;\n      };\n      let wait_connectList = [];\n      factory.wait_connect = () => {\n        let deferred = $q.defer();\n        if (is_Connected == true) {\n          deferred.resolve();\n        } else\n          wait_connectList.push(deferred);\n        return deferred.promise;\n      };\n\n      return factory;\n    }\n  ]);",
    "angular.module('app.services')\n  .factory('goldenLayoutService', ['$q', '$window', '$templateCache', '$rootScope', '$compile',\n    function ($q, $window, $templateCache, $rootScope, $compile) {\n      var config = {\n        content: [{\n          type: 'row',\n          content: [{\n            isClosable: false,\n            title: \"Viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }]\n        }]\n      };\n      let myLayout = 0;\n      let factory = {};\n      factory.init = () => {\n        if (myLayout == 0) {\n          myLayout = new GoldenLayout(config, $(\"#g-layout\"));\n          myLayout.registerComponent('SpinalHome', function (container, state) {\n            var element = container.getElement();\n            if (state.template == '') {\n\n              element.html();\n              $compile(element.contents())($rootScope);\n            } else {\n              element.html(\"<div class=\\\"gpannel-content\\\" ng-controller=\\\"\" + state.controller + \"\\\" ng-cloak>\" +\n                $templateCache.get(state.template) + \"</div>\");\n              $compile(element.contents())($rootScope);\n            }\n          });\n\n          myLayout.init();\n          angular.element($window).bind('resize', function () {\n            myLayout.updateSize();\n          });\n          $rootScope.$emit(\"GoldenLayout_READY\");\n        }\n      };\n\n      factory.wait_ready = () => {\n        return $q(function (resolve, reject) {\n          $rootScope.$on(\"GoldenLayout_READY\", () => {\n            resolve();\n          });\n        });\n      };\n\n\n\n      factory.createChild = (config) => {\n        myLayout.root.contentItems[0].addChild(config);\n      };\n\n      factory.createDragSource = (element, config) => {\n        myLayout.createDragSource(element, config);\n\n      };\n\n\n      return factory;\n    }\n  ])\n  .factory('layout_uid', function () {\n    let uid = 0;\n    return ({\n      get: () => {\n        let id = uid++;\n        return id;\n      }\n    });\n  });",
    "angular.module('app.spinalcom')\n  .factory('ngSpinalCore', ['$q', function ($q) {\n    var service = {};\n    service.conn = 0;\n\n    service.connect = function (option) {\n      service.conn = spinalCore.connect(option);\n    };\n    service.store = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.store(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load = function (path) {\n      var deferred = $q.defer();\n      spinalCore.load(service.conn, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_type = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.load_type(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_right = function (ptr) {\n      var deferred = $q.defer();\n      spinalCore.load_right(service.conn, ptr, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.share_model = function (data, filename, flag, target_username) {\n      return spinalCore.share_model(service.conn, data, filename, flag, target_username);\n    };\n    return service;\n  }]);",
    "angular.module('app.spinalcom')\n  .factory('spinalModelDictionary', [\"$q\", \"ngSpinalCore\", \"config\", \"authService\", \"$routeParams\", \"$location\",\n    function ($q, ngSpinalCore, config, authService, $routeParams, $location) {\n      let factory = {};\n      factory.model = 0;\n      factory.init = () => {\n        var deferred = $q.defer();\n        if (factory.model == 0) {\n          authService.wait_connect().then(() => {\n            let user = authService.get_user();\n            let path = $routeParams.filepath;\n            console.log(path)\n            if (path) {\n              path = atob(path);\n              ngSpinalCore.load(path).then((m) => {\n                factory.model = m;\n                console.log(m);\n                deferred.resolve(m);\n\n              }, () => {\n                let msg = \"not able to load : \" + path;\n                console.error(msg);\n                $location.replace('/drive/');\n                deferred.reject(msg);\n              });\n            }\n          }, () => {\n            let msg = \"not able to load : \" + path;\n            console.error(msg);\n            $location.replace('/drive/');\n            deferred.reject(msg);\n          });\n        } else\n          deferred.resolve(factory.model);\n        return deferred.promise;\n      };\n      return factory;\n    }\n  ]);"
  ]
}